<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key attr.name="name" attr.type="string" for="node" id="d18" />
  <key attr.name="averageWordLength" attr.type="long" for="node" id="d17" />
  <key attr.name="sentiment" attr.type="string" for="node" id="d16" />
  <key attr.name="sentiment_score" attr.type="double" for="node" id="d15" />
  <key attr.name="readingLevel" attr.type="double" for="node" id="d14" />
  <key attr.name="quotedTextPerLength" attr.type="long" for="node" id="d13" />
  <key attr.name="averageWordLength" attr.type="double" for="node" id="d12" />
  <key attr.name="length" attr.type="long" for="node" id="d11" />
  <key attr.name="body" attr.type="string" for="node" id="d10" />
  <key attr.name="timestamp" attr.type="double" for="node" id="d9" />
  <key attr.name="score" attr.type="long" for="node" id="d8" />
  <key attr.name="author" attr.type="string" for="node" id="d7" />
  <key attr.name="parent_id" attr.type="string" for="node" id="d6" />
  <key attr.name="downs" attr.type="long" for="node" id="d5" />
  <key attr.name="ups" attr.type="long" for="node" id="d4" />
  <key attr.name="upvote_ratio" attr.type="double" for="node" id="d3" />
  <key attr.name="view_count" attr.type="long" for="node" id="d2" />
  <key attr.name="title" attr.type="string" for="node" id="d1" />
  <key attr.name="id" attr.type="string" for="node" id="d0" />
  <graph edgedefault="undirected">
    <node id="9gxkfi">
      <data key="d0">9gxkfi</data>
      <data key="d1">Options for Online School for CS</data>
      <data key="d2">0</data>
      <data key="d3">0.67</data>
      <data key="d4">1</data>
      <data key="d5">0</data>
    </node>
    <node id="e67kej6">
      <data key="d6">9gxkfi</data>
      <data key="d0">e67kej6</data>
      <data key="d7">testq90</data>
      <data key="d8">1</data>
      <data key="d9">1537325799.0</data>
      <data key="d10">&gt; I know that it is important that schools needs to be ABET accredited.

Actually, it's not. In engineering maybe.</data>
      <data key="d11">114</data>
      <data key="d12">4.944</data>
      <data key="d13">0</data>
      <data key="d14">5.7</data>
      <data key="d15">0.0674</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e67n3mc">
      <data key="d6">e67kej6</data>
      <data key="d0">e67n3mc</data>
      <data key="d7">Snonner</data>
      <data key="d8">1</data>
      <data key="d9">1537327931.0</data>
      <data key="d10">Oh that is so awesome and makes things a little easier for me :)

&amp;#x200B;</data>
      <data key="d11">74</data>
      <data key="d12">3.467</data>
      <data key="d13">0</data>
      <data key="d14">5.2</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="9fui2s">
      <data key="d0">9fui2s</data>
      <data key="d1">Run time and space complexity for Power function using recursion</data>
      <data key="d2">0</data>
      <data key="d3">0.71</data>
      <data key="d4">3</data>
      <data key="d5">0</data>
    </node>
    <node id="e60dtr7">
      <data key="d6">9fui2s</data>
      <data key="d0">e60dtr7</data>
      <data key="d7">hindmost-one</data>
      <data key="d8">2</data>
      <data key="d9">1537025292.0</data>
      <data key="d10">Replace `pow_2( x, n / 2 ) * pow_2( x, n / 2 )` with `sqr( pow_2( x, n / 2 ) )` and you're fine.</data>
      <data key="d11">96</data>
      <data key="d12">4.636</data>
      <data key="d13">0</data>
      <data key="d14">9.1</data>
      <data key="d15">0.2023</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5zhzlj">
      <data key="d6">9fui2s</data>
      <data key="d0">e5zhzlj</data>
      <data key="d7">c0deb0t</data>
      <data key="d8">1</data>
      <data key="d9">1536985308.0</data>
      <data key="d10">I think you are supposed to save the result of the pow call in a variable so that you don't need to call it twice! Also for your analysis the "depth" of the function call stack will be log n so it would be 2^(log n) = n calls

Edit: also your your calculation for when the exponent is odd is slightly off, it should be a little more similar to the even case</data>
      <data key="d11">357</data>
      <data key="d12">5.48</data>
      <data key="d13">1</data>
      <data key="d14">14.0</data>
      <data key="d15">0.5411</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e645h0k">
      <data key="d6">9fui2s</data>
      <data key="d0">e645h0k</data>
      <data key="d7">soto_okami</data>
      <data key="d8">1</data>
      <data key="d9">1537185233.0</data>
      <data key="d10">is this for Yu Chen?</data>
      <data key="d11">20</data>
      <data key="d17">3</data>
      <data key="d13">0</data>
      <data key="d14">-1.9</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e65rf4x">
      <data key="d6">9fui2s</data>
      <data key="d0">e65rf4x</data>
      <data key="d7">Edumacated1980</data>
      <data key="d8">1</data>
      <data key="d9">1537252101.0</data>
      <data key="d10">What did you end up getting for this? I got (logn)\^2 for running time. I really had no idea about the space complexity. </data>
      <data key="d11">121</data>
      <data key="d12">4.136</data>
      <data key="d13">0</data>
      <data key="d14">2.8</data>
      <data key="d15">-0.1189</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e678vds" />
    <node id="e622y3r">
      <data key="d6">e60dtr7</data>
      <data key="d0">e622y3r</data>
      <data key="d7">Ragnarock14</data>
      <data key="d8">1</data>
      <data key="d9">1537098577.0</data>
      <data key="d10">Pow\_2(x\*x,n/2) but thanks. </data>
      <data key="d11">29</data>
      <data key="d12">2.571</data>
      <data key="d13">0</data>
      <data key="d14">0.9</data>
      <data key="d15">0.5927</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5ziqig">
      <data key="d6">e5zhzlj</data>
      <data key="d0">e5ziqig</data>
      <data key="d7">Ragnarock14</data>
      <data key="d8">1</data>
      <data key="d9">1536985981.0</data>
      <data key="d10">It makes sense that every recursion call call its self twice but n is halved so they essentially cancels themselves out.

How would the depth of the call stack be Logn?

Edit: More info</data>
      <data key="d11">185</data>
      <data key="d12">4.742</data>
      <data key="d13">0</data>
      <data key="d14">4.2</data>
      <data key="d15">-0.2054</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e645lrf">
      <data key="d6">e645h0k</data>
      <data key="d0">e645lrf</data>
      <data key="d7">Freak139</data>
      <data key="d8">1</data>
      <data key="d9">1537185397.0</data>
      <data key="d10">omg bro... I'm in this class and I'm stuck on the last one</data>
      <data key="d11">58</data>
      <data key="d12">3.538</data>
      <data key="d13">0</data>
      <data key="d14">1.3</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e65t4hi">
      <data key="d6">e65rf4x</data>
      <data key="d0">e65t4hi</data>
      <data key="d7">Ragnarock14</data>
      <data key="d8">1</data>
      <data key="d9">1537253673.0</data>
      <data key="d10">N for running time and idk about space complexity</data>
      <data key="d11">49</data>
      <data key="d12">4.556</data>
      <data key="d13">0</data>
      <data key="d14">4.4</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5zqb9p">
      <data key="d6">e5ziqig</data>
      <data key="d0">e5zqb9p</data>
      <data key="d7">Ikor_Genorio</data>
      <data key="d8">1</data>
      <data key="d9">1536993381.0</data>
      <data key="d10">Depth of the stack call is not logN at the moment, however it can be if you, in the n is even care  compute the power function once, store it in a variable and squaring that variable. Now you are calling the same function twice, both resulting in the same answer.</data>
      <data key="d11">263</data>
      <data key="d12">5.421</data>
      <data key="d13">0</data>
      <data key="d14">9.7</data>
      <data key="d15">0.247</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e648hdr">
      <data key="d6">e645lrf</data>
      <data key="d0">e648hdr</data>
      <data key="d7">soto_okami</data>
      <data key="d8">2</data>
      <data key="d9">1537189382.0</data>
      <data key="d10">haha same. i have best case tc O(logn) and worst tc O(n)</data>
      <data key="d11">56</data>
      <data key="d12">3.333</data>
      <data key="d13">0</data>
      <data key="d14">2.1</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e6491wc">
      <data key="d6">e645lrf</data>
      <data key="d0">e6491wc</data>
      <data key="d7">Edumacated1980</data>
      <data key="d8">1</data>
      <data key="d9">1537190260.0</data>
      <data key="d10">As am i</data>
      <data key="d11">7</data>
      <data key="d12">1.667</data>
      <data key="d13">0</data>
      <data key="d14">-2.7</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e623ao1">
      <data key="d6">e5zqb9p</data>
      <data key="d0">e623ao1</data>
      <data key="d7">Ragnarock14</data>
      <data key="d8">1</data>
      <data key="d9">1537099017.0</data>
      <data key="d10">what would be the depth of the call stack then in my case?

&amp;#x200B;</data>
      <data key="d11">68</data>
      <data key="d12">3.538</data>
      <data key="d13">0</data>
      <data key="d14">0.5</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e62hg3k">
      <data key="d6">e623ao1</data>
      <data key="d0">e62hg3k</data>
      <data key="d7">Ikor_Genorio</data>
      <data key="d8">1</data>
      <data key="d9">1537125718.0</data>
      <data key="d10">The depth will be log N (depth of a tree is the amount of steps from the root to a leaf node), however the amount of tree nodes will be N I think, as you call the function twice</data>
      <data key="d11">177</data>
      <data key="d17">5</data>
      <data key="d13">0</data>
      <data key="d14">12.6</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e62zbml">
      <data key="d6">e62hg3k</data>
      <data key="d0">e62zbml</data>
      <data key="d7">Ragnarock14</data>
      <data key="d8">1</data>
      <data key="d9">1537146883.0</data>
      <data key="d10">Ok what do the nodes have to do with the call stack?</data>
      <data key="d11">52</data>
      <data key="d17">4</data>
      <data key="d13">0</data>
      <data key="d14">0.9</data>
      <data key="d15">0.296</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e64hah5">
      <data key="d6">e62zbml</data>
      <data key="d0">e64hah5</data>
      <data key="d7">Ikor_Genorio</data>
      <data key="d8">1</data>
      <data key="d9">1537206899.0</data>
      <data key="d10">Ah not sure if you know about trees, I assumed you did because you used the term depth. Each node of a tree represents a function call, and each node has a parent (the function who called the current call) and children (the functions the current call makes).

So the amount of nodes represents the amount of function calls.</data>
      <data key="d11">323</data>
      <data key="d12">6.711</data>
      <data key="d13">0</data>
      <data key="d14">6.3</data>
      <data key="d15">-0.0804</data>
      <data key="d16">Negative</data>
    </node>
    <node id="9grbgu">
      <data key="d0">9grbgu</data>
      <data key="d1">Do I get more FLOPS with a 64 bit application vs a 32 bit application?</data>
      <data key="d2">0</data>
      <data key="d3">1.0</data>
      <data key="d4">1</data>
      <data key="d5">0</data>
    </node>
    <node id="e66bw67" />
    <node id="9gu1t8">
      <data key="d0">9gu1t8</data>
      <data key="d1">Assembly taught using Raspberry PI</data>
      <data key="d2">0</data>
      <data key="d3">0.91</data>
      <data key="d4">65</data>
      <data key="d5">0</data>
    </node>
    <node id="e670bcu">
      <data key="d6">9gu1t8</data>
      <data key="d0">e670bcu</data>
      <data key="d7">cirosantilli</data>
      <data key="d8">6</data>
      <data key="d9">1537309267.0</data>
      <data key="d10">My setup might also be of interest: [https://github.com/cirosantilli/arm-assembly-cheat](https://github.com/cirosantilli/arm-assembly-cheat)

Features:

\- runs both on RPI and QEMU user mode from x86 host

\- build and run all examples in a single command

\- GDB step debug just works

\- dozens of easy to use assertions to test your expectations</data>
      <data key="d11">349</data>
      <data key="d12">6.902</data>
      <data key="d13">0</data>
      <data key="d14">14.2</data>
      <data key="d15">0.4588</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e671dfv">
      <data key="d6">e670bcu</data>
      <data key="d0">e671dfv</data>
      <data key="d7">mulletlaw</data>
      <data key="d8">2</data>
      <data key="d9">1537310214.0</data>
      <data key="d10">Starred. Looks pretty comprehensive.</data>
      <data key="d11">36</data>
      <data key="d12">7.75</data>
      <data key="d13">0</data>
      <data key="d14">9.6</data>
      <data key="d15">0.3185</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e673vc9">
      <data key="d6">e671dfv</data>
      <data key="d0">e673vc9</data>
      <data key="d7">cirosantilli</data>
      <data key="d8">1</data>
      <data key="d9">1537312415.0</data>
      <data key="d10">Thanks. It is definitely not comprehensive yet, but it is a solid setup to learn. I'm adding stuff as I learn.</data>
      <data key="d11">110</data>
      <data key="d12">4.526</data>
      <data key="d13">0</data>
      <data key="d14">5.0</data>
      <data key="d15">0.2587</data>
      <data key="d16">Positive</data>
    </node>
    <node id="9gplp9">
      <data key="d0">9gplp9</data>
      <data key="d1">Edit Distance algorithm that allows "block" transpositions? (help a humanities PhD student)</data>
      <data key="d2">0</data>
      <data key="d3">0.9</data>
      <data key="d4">54</data>
      <data key="d5">0</data>
    </node>
    <node id="e660uy8">
      <data key="d6">9gplp9</data>
      <data key="d0">e660uy8</data>
      <data key="d7">specalight</data>
      <data key="d8">9</data>
      <data key="d9">1537261117.0</data>
      <data key="d10">If I'm reading the abstract for (Xia, 2008) right, then the algorithm you are looking for should be in the paper itself.</data>
      <data key="d11">120</data>
      <data key="d12">4.947</data>
      <data key="d13">0</data>
      <data key="d14">8.3</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66cogr">
      <data key="d6">9gplp9</data>
      <data key="d0">e66cogr</data>
      <data key="d7">rudster</data>
      <data key="d8">3</data>
      <data key="d9">1537272427.0</data>
      <data key="d10">Suggest you just compare fingerprints of blocks of text as in 

ftp://ftp.cs.arizona.edu/reports/1993/TR93-33.pdf

&gt; ABSTRACT
We present a tool, called sif, for finding all similar files in a large file system. Files are considered similar if they
have significant number of common pieces, even if they are very different otherwise. For example, one file may be
contained, possibly with some changes, in another file, or a file may be a reorganization of another file. The running
time for finding all groups of similar files, even for as little as 25% similarity, is on the order of 500MB to
1GB an hour. The amount of similarity and several other customized parameters can be determined by the user at
a post-processing stage, which is very fast. Sif can also be used to very quickly identify all similar files to a query
file using a preprocessed index. Application of sif can be found in file management, information collecting (to
remove duplicates), program reuse, file synchronization, data compression, and maybe even plagiarism detection.

tl;dr; use a hash algo on every window of N characters (shorter than a sentence but long enough to capture phrases.. The paper uses 50 characters), such that you can easily recompute it.  The "similarity" of two documents is the # of common hashes / the larger # of hashes.</data>
      <data key="d11">1322</data>
      <data key="d12">7.532</data>
      <data key="d13">1</data>
      <data key="d14">10.9</data>
      <data key="d15">0.0638</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66wtxn">
      <data key="d6">9gplp9</data>
      <data key="d0">e66wtxn</data>
      <data key="d7">vidro3</data>
      <data key="d8">3</data>
      <data key="d9">1537305903.0</data>
      <data key="d10">As a former humanities guy who's been dabbling in CS for a year I think some of the discussion may be getting sidetracked by the algorithmic complexity issue. 

Does your work require an efficient algorithm, or just the answer? 

Now I've no idea how long it might take some of these comparisons to run but I'd suggest implementing some of the algorithms in the papers that have been discussed and seeing what the run time is. 

High algorithmic complexity may lead this run time to tend towards the eventual heat death of the universe, but it might also be like, a day. Would that be so terrible? 
</data>
      <data key="d11">599</data>
      <data key="d12">6.115</data>
      <data key="d13">0</data>
      <data key="d14">9.3</data>
      <data key="d15">-0.0281</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66dpry">
      <data key="d6">9gplp9</data>
      <data key="d0">e66dpry</data>
      <data key="d7">laxatives</data>
      <data key="d8">2</data>
      <data key="d9">1537273732.0</data>
      <data key="d10">What you've described in that first example is similar to a correlation coefficient. It takes two vectors (possibly of characters), rotates the last k characters of the second vector to the front, and compares the similarity between the two vectors, summing over all possible values of k. So "abc" will have a high correlation with "cab", but not with "cba". This sort of works in the extreme case where you only allow one block to be moved and the move is a cyclic rotation.

There's a more general algorithm for finding substrings efficiently, called Burrows Wheeler Transform, but its not exactly used for measuring edit distance.

It sounds like that paper linked above is your best bet, especially if they've open sources the code or its simple to implement.</data>
      <data key="d11">763</data>
      <data key="d12">6.309</data>
      <data key="d13">3</data>
      <data key="d14">10.5</data>
      <data key="d15">0.1897</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66ay2a">
      <data key="d6">9gplp9</data>
      <data key="d0">e66ay2a</data>
      <data key="d7">tjorg35</data>
      <data key="d8">1</data>
      <data key="d9">1537270439.0</data>
      <data key="d10">Here are some Java implementations of string similarity algorithms, didn't look at any of these too in depth to see if any fit your specific needs. Regardless, this git repository is good place to start (or pass on to whomever you choose to make your program). Also wouldn't be a bad idea to look elsewhere on Github. There's always a possibility that the algorithm is already out there and open source!

[https://github.com/tdebatty/java-string-similarity](https://github.com/tdebatty/java-string-similarity)</data>
      <data key="d11">509</data>
      <data key="d12">6.967</data>
      <data key="d13">0</data>
      <data key="d14">12.7</data>
      <data key="d15">0.3082</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66eyrj">
      <data key="d6">9gplp9</data>
      <data key="d0">e66eyrj</data>
      <data key="d7">tjorg35</data>
      <data key="d8">1</data>
      <data key="d9">1537275438.0</data>
      <data key="d10">I believe bigger than 1 character blocks means that a block can contain more than 1 character and the algorithm will still work. The normal algorithm allows transposition for a character block of size 1 (1 character). The modified version should be able to handle blocks up to set size, i.e. however large you want to check for character blocks. This was my interpretation of what the documentation said, although I did not bother to test it.

EDIT: Yes, the size of the substring</data>
      <data key="d11">480</data>
      <data key="d12">6.508</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">-0.2485</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66kcmo">
      <data key="d6">9gplp9</data>
      <data key="d0">e66kcmo</data>
      <data key="d7">rumliegen</data>
      <data key="d8">1</data>
      <data key="d9">1537284664.0</data>
      <data key="d10">Do you need the distance between your strings or could you maybe also use another metric? I've just implemented an algorithm that counts overlaps between strings (word based) that should be able to find the sub phrases that are the same but at a different position. I didn't give it much thought but if you think that it might help you, I could send you my code (python) and explain it to you in more detail. Important: I can't do that before Friday. If that sounds somehow useful send a pm with your email and I will message you Friday. </data>
      <data key="d11">538</data>
      <data key="d12">5.931</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.2385</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66mtkp" />
    <node id="e66p0ej" />
    <node id="e66vqys">
      <data key="d6">9gplp9</data>
      <data key="d0">e66vqys</data>
      <data key="d7">AceOfShades_</data>
      <data key="d8">1</data>
      <data key="d9">1537304759.0</data>
      <data key="d10">Since you only have a couple transpositions, can you use a Longest Common Substring algorithm to find those, remove them, then calculate the edit distance of the rest?</data>
      <data key="d11">167</data>
      <data key="d12">5.44</data>
      <data key="d13">0</data>
      <data key="d14">13.0</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e65yrqi">
      <data key="d6">9gplp9</data>
      <data key="d0">e65yrqi</data>
      <data key="d7">ErrantRailer</data>
      <data key="d8">1</data>
      <data key="d9">1537259148.0</data>
      <data key="d10">Do you know each of the edits that take place? If you do (and they follow certain rules) what you can do is make a vocab map:

"abc" maps to "x1"

"de" maps to "x2"

"abcde" -&gt; "x1" "x2", then the SED between x1 x2 and x2 x1 is 1. 

If there are too many edits for you to do this reasonably manually then this won't work but this is what has worked for me in my research.</data>
      <data key="d11">371</data>
      <data key="d12">5.057</data>
      <data key="d13">7</data>
      <data key="d14">7.4</data>
      <data key="d15">0.0911</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e65xlxe" />
    <node id="e667csi" />
    <node id="e662mt5">
      <data key="d6">e660uy8</data>
      <data key="d0">e662mt5</data>
      <data key="d7">ignacioMendez</data>
      <data key="d8">9</data>
      <data key="d9">1537262696.0</data>
      <data key="d10">The full paper is at https://sci-hub.tw/10.1109/icycs.2008.14

This algorithm seems like what the OP needs, and the paper mentions a Java implementation of the algorithm. Unfortunately I can't find it anywhere. Maybe reach out to the author? xiat@ruc.edu.cn

If you can't find the original code, I bet you could have a grad student re-implement it. You might also look into Gregor’s algorithm mentioned in the paper. It only works for string where the swapped blocks are adjacent though.</data>
      <data key="d11">487</data>
      <data key="d12">6.365</data>
      <data key="d13">0</data>
      <data key="d14">6.4</data>
      <data key="d15">-0.0601</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66268p">
      <data key="d6">e660uy8</data>
      <data key="d0">e66268p</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">6</data>
      <data key="d9">1537262281.0</data>
      <data key="d10">**Edit:** Most of the conversation below has dealt with [this piece](https://www.sciencedirect.com/science/article/pii/S157086670600030X) by Shapira &amp; Storer instead. Also perhaps relevant may be [this piece](https://www.sciencedirect.com/science/article/pii/S030439759600268X)by Lopresti and Tompkins.The Xia piece can be found [here](https://sci-hub.tw/10.1109/icycs.2008.14) but that algorithm only works for adjacent blocks.

&amp;#x200B;

~~I've placed a request for the Xia, 2008 piece. Unfortunately, it's one of the only articles on my (now expanded) list that my institution doesn't give me access to. I'd be happy to send along full screen shots for almost any of the other articles (or send the articles in full to an email address). I'll post what I can of the Xia piece here when I get a copy.~~

~~If Xia does print the algorithm I need, would it just be a matter of approaching a competent computer scientist and asking them to write a program for it?~~

&amp;#x200B;</data>
      <data key="d11">974</data>
      <data key="d17">8</data>
      <data key="d13">0</data>
      <data key="d14">8.2</data>
      <data key="d15">0.0572</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66fi7p">
      <data key="d6">e66cogr</data>
      <data key="d0">e66fi7p</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">2</data>
      <data key="d9">1537276217.0</data>
      <data key="d10">I'm trying to respond to everyone who is being kind enough to try to help me but I'm afraid I just don't understand any part of your proposal well enough to reply. It's entirely my fault -- I'm coming into a comp sci subreddit without any knowledge of computer science. I'll sit down and try to read through as much of the linked report as I didn't understand the abstract at all. :-(  
</data>
      <data key="d11">387</data>
      <data key="d12">5.482</data>
      <data key="d13">0</data>
      <data key="d14">10.2</data>
      <data key="d15">0.0786</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e677ns7">
      <data key="d6">e66wtxn</data>
      <data key="d0">e677ns7</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">2</data>
      <data key="d9">1537315610.0</data>
      <data key="d10">It doesn't need to be efficient at all! It's a chapter of my dissertation and I literally have years to finish it. It would be totally fine if each operation took a day or more! Is there an algorithm mentioned in one of the papers that you think would work for me?</data>
      <data key="d11">264</data>
      <data key="d12">4.543</data>
      <data key="d13">0</data>
      <data key="d14">6.0</data>
      <data key="d15">0.203</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66eafi">
      <data key="d6">e66dpry</data>
      <data key="d0">e66eafi</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537274490.0</data>
      <data key="d10">As far as I can tell they didn't provide the code in their article -- unless I'm missing something? It would save me time and money if it already existed. Where would I find the code if it were open sourced?</data>
      <data key="d11">207</data>
      <data key="d12">4.765</data>
      <data key="d13">0</data>
      <data key="d14">4.9</data>
      <data key="d15">0.066</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66bivf">
      <data key="d6">e66ay2a</data>
      <data key="d0">e66bivf</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">2</data>
      <data key="d9">1537271078.0</data>
      <data key="d10">Thank you for this. I read through each of these and as far as I can tell, none of them allow for block transposition. Am I wrong about that?</data>
      <data key="d11">141</data>
      <data key="d12">4.542</data>
      <data key="d13">0</data>
      <data key="d14">1.2</data>
      <data key="d15">-0.2226</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66fbtj">
      <data key="d6">e66eyrj</data>
      <data key="d0">e66fbtj</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537275961.0</data>
      <data key="d10">That's outstanding! Do you have any sense of how this ["Boehmer &amp; Rees 2008 modification"](https://github.com/GlobalNamesArchitecture/damerau-levenshtein/blob/master/README.md) differs from the algorithm deemed impossible (or at least unwieldy) in [the S&amp;S article](https://www.sciencedirect.com/science/article/pii/S157086670600030X) linked by [**u/specalight**](https://www.reddit.com/user/specalight) above? Based on that simple description, it seems to promise what the authors deny is possible.</data>
      <data key="d11">499</data>
      <data key="d12">8.673</data>
      <data key="d13">1</data>
      <data key="d14">15.0</data>
      <data key="d15">0.1036</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e6785q3">
      <data key="d6">e66kcmo</data>
      <data key="d0">e6785q3</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537316026.0</data>
      <data key="d10">Thank you! I think I do need to use the distance between the two strings (I'm happy to explain my project in greater to detail to show you why). It sounds like the code you've mentioned might be useful for detecting the "blocks"/substrings that my final calculator will have to transpose. </data>
      <data key="d11">289</data>
      <data key="d12">5.476</data>
      <data key="d13">1</data>
      <data key="d14">9.7</data>
      <data key="d15">0.6049</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e677rih">
      <data key="d6">e66vqys</data>
      <data key="d0">e677rih</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537315697.0</data>
      <data key="d10">Oh that's really interesting. Surely it would be possible to write a program that worked that way, right?</data>
      <data key="d11">105</data>
      <data key="d17">5</data>
      <data key="d13">0</data>
      <data key="d14">5.6</data>
      <data key="d15">0.449</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e660g30">
      <data key="d6">e65yrqi</data>
      <data key="d0">e660g30</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537260733.0</data>
      <data key="d10">I really appreciate the reply! Unfortunately I don’t think this will work. I’m comparing forty different sets of nine strings, each of which is 100-200 letters long. There is really substantial variation between some of the strings being compared (and less for others). I can’t trust myself to find the most efficient way to edit the strings and even if I could do so, it would take me years to calculate all the edit distances. I definitely need a program of some sort.


I undertook the project planning to use the L-D distance calculator (the algorithm and different versions of the code are widely available online) but then I realized that the transposition of phrases and whole sentences were being counted as several edits (as many words as are in the phrase) not just one.

Edit: To clarify, each “set” is a story in the synoptic gospels. Each string is a manuscript containing that story. So there are only ever nine strings being compared to each other. I have forty such groups of nine strings.</data>
      <data key="d11">1005</data>
      <data key="d12">6.725</data>
      <data key="d13">0</data>
      <data key="d14">7.1</data>
      <data key="d15">0.1517</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e6640fx">
      <data key="d6">e662mt5</data>
      <data key="d0">e6640fx</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">3</data>
      <data key="d9">1537263934.0</data>
      <data key="d10">\[**Edit:** Most of the conversation below has dealt with [this piece](https://www.sciencedirect.com/science/article/pii/S157086670600030X) by Shapira &amp; Storer instead. Also perhaps relevant may be [this piece](https://www.sciencedirect.com/science/article/pii/S030439759600268X) by Lopresti and Tompkins. The Xia piece can be found [here](https://sci-hub.tw/10.1109/icycs.2008.14) but that algorithm only works for adjacent blocks. The ["Boehmer &amp; Rees 2008 modification"](https://github.com/GlobalNamesArchitecture/damerau-levenshtein/blob/master/README.md)  described on this page sounds like it might be promising.\]  
Thank you for this! That's tremendously helpful.

Is there any reason it would only work for adjacent blocks? I understand that it is written in order to only work for adjacent blocks but is there any reason it could not work for "generalized transpositions" of substrings? This is certainly a step in the right direction but at the same time authors/scribes often relocate entire phrases to non-adjacent positions. I need that to count as one "change".

  
</data>
      <data key="d11">1081</data>
      <data key="d12">9.227</data>
      <data key="d13">3</data>
      <data key="d14">9.3</data>
      <data key="d15">0.0563</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e662mfn">
      <data key="d6">e66268p</data>
      <data key="d0">e662mfn</data>
      <data key="d7">PrimesAreMyFavorite</data>
      <data key="d8">4</data>
      <data key="d9">1537262687.0</data>
      <data key="d10">Scihub</data>
      <data key="d11">6</data>
      <data key="d17">6</data>
      <data key="d13">0</data>
      <data key="d14">8.4</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e672z2v">
      <data key="d6">e66fi7p</data>
      <data key="d0">e672z2v</data>
      <data key="d7">rudster</data>
      <data key="d8">1</data>
      <data key="d9">1537311635.0</data>
      <data key="d10">Imagine just counting the different characters in a document (7302 *a*s, 8130 *b*s, etc), and comparing it to another count of the different characters in a different document. That would give you the same 'similarity' measurement as this algo with windowSize=1. Duplicate documents will be 100% similar, but so will any other document that simply has the same character frequency &amp; length.

windowSize=2, and you're counting the occurrence of all pairs of adjacent characters.

The paper uses windowSize=50. Counting &amp; comparing frequencies becomes a bit more difficult at that point, so instead of using the actual 50-character blocks, they're all hashed.  And that paper has a lot more about making it efficient &amp; about treating not just 2 documents at a time but a whole filesystem.  But for your case, simple methods would work quite fine -- output all the hashes, sort them, and then walk through both at once counting matches &amp; mismatches.</data>
      <data key="d11">946</data>
      <data key="d12">7.231</data>
      <data key="d13">0</data>
      <data key="d14">10.5</data>
      <data key="d15">-0.0091</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e6799eb">
      <data key="d6">e677ns7</data>
      <data key="d0">e6799eb</data>
      <data key="d7">vidro3</data>
      <data key="d8">1</data>
      <data key="d9">1537316929.0</data>
      <data key="d10">i have no idea. can your adviser try to set you up with someone from the CS department who could help you?

You could also try to use a repl environment like repl.it to tinker with the code until it works</data>
      <data key="d11">204</data>
      <data key="d12">4.735</data>
      <data key="d13">0</data>
      <data key="d14">3.8</data>
      <data key="d15">0.3816</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66ecau">
      <data key="d6">e66eafi</data>
      <data key="d0">e66ecau</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537274562.0</data>
      <data key="d10">Similarly, the code for the algorithm proposed [HERE](https://ac.els-cdn.com/S030439759600268X/1-s2.0-S030439759600268X-main.pdf?_tid=f3a8c6a0-5de0-4c87-ac11-fee9f09be44e&amp;acdnat=1537245519_a415c714242a645771254bb05723788e) would probably work...</data>
      <data key="d11">245</data>
      <data key="d12">19.167</data>
      <data key="d13">0</data>
      <data key="d14">16.1</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66csei">
      <data key="d6">e66bivf</data>
      <data key="d0">e66csei</data>
      <data key="d7">tjorg35</data>
      <data key="d8">1</data>
      <data key="d9">1537272561.0</data>
      <data key="d10">Don't think so. Maybe check out this one and skip to the Boehmer and Rees modification. Still not sure if it fits your exact needs but I think it is at least further in the right direction.

[https://github.com/GlobalNamesArchitecture/damerau-levenshtein/blob/master/README.md](https://github.com/GlobalNamesArchitecture/damerau-levenshtein/blob/master/README.md)</data>
      <data key="d11">363</data>
      <data key="d12">9.353</data>
      <data key="d13">0</data>
      <data key="d14">14.1</data>
      <data key="d15">-0.0246</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66frif">
      <data key="d6">e66fbtj</data>
      <data key="d0">e66frif</data>
      <data key="d7">tjorg35</data>
      <data key="d8">1</data>
      <data key="d9">1537276598.0</data>
      <data key="d10">"No efficient algorithm", the algorithm given in that Github link claims to be O(N\*M) which wouldn't be considered efficient. Whether or not efficiency is an issue depends on the size of your strings.

EDIT: Also after re-reading your original post and the repository readme I do have some doubts that what you want and what the offered algorithm do are not the same, but I do think they are pretty similar. At the very least you should be able to try some tests to see if this is the case or not.</data>
      <data key="d11">498</data>
      <data key="d12">5.866</data>
      <data key="d13">1</data>
      <data key="d14">8.7</data>
      <data key="d15">0.2304</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e665pt2">
      <data key="d6">e6640fx</data>
      <data key="d0">e665pt2</data>
      <data key="d7">specalight</data>
      <data key="d8">4</data>
      <data key="d9">1537265471.0</data>
      <data key="d10">[This paper](https://www.sciencedirect.com/science/article/pii/S157086670600030X) suggests that there is probably no efficient algorithm (unless P=NP) to optimally solve what you are looking for.</data>
      <data key="d11">195</data>
      <data key="d12">7.682</data>
      <data key="d13">0</data>
      <data key="d14">17.0</data>
      <data key="d15">0.2859</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e667jvl">
      <data key="d6">e6640fx</data>
      <data key="d0">e667jvl</data>
      <data key="d7">Aatch</data>
      <data key="d8">2</data>
      <data key="d9">1537267133.0</data>
      <data key="d10">Given the data set you listed in another comment, you might be able to work with a more naïve custom algorithm that handles a set of cases you care about. Any decent CompSci grad student should be able to come up with something that works well enough for you.</data>
      <data key="d11">259</data>
      <data key="d12">5.333</data>
      <data key="d13">0</data>
      <data key="d14">9.3</data>
      <data key="d15">0.3836</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e665hm0">
      <data key="d6">e662mfn</data>
      <data key="d0">e665hm0</data>
      <data key="d7">ManageableGrip</data>
      <data key="d8">1</data>
      <data key="d9">1537265262.0</data>
      <data key="d10">sci-hub (.) tw</data>
      <data key="d11">14</data>
      <data key="d12">4.5</data>
      <data key="d13">0</data>
      <data key="d14">8.8</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e67a19p">
      <data key="d6">e6799eb</data>
      <data key="d0">e67a19p</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537317551.0</data>
      <data key="d10">Yes, I'm definitely going to go recruiting in the CS department! I can't even understand most of these articles.</data>
      <data key="d11">112</data>
      <data key="d12">4.789</data>
      <data key="d13">0</data>
      <data key="d14">7.0</data>
      <data key="d15">0.345</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66elwc">
      <data key="d6">e66csei</data>
      <data key="d0">e66elwc</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537274930.0</data>
      <data key="d10">Do you know if "bigger than 1 character blocks" is referring to the size of the substring or the range of the transposition? If it's the former, then this might be what I'm look for!

If only I actually knew anything about computers I could take it for a spin on some test cases. I'll keep this in my pocket when I approach a comp sci person for help.

Thank you!</data>
      <data key="d11">363</data>
      <data key="d12">4.879</data>
      <data key="d13">1</data>
      <data key="d14">6.7</data>
      <data key="d15">0.1191</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66hd3o">
      <data key="d6">e66frif</data>
      <data key="d0">e66hd3o</data>
      <data key="d7">AndreasTPC</data>
      <data key="d8">1</data>
      <data key="d9">1537279094.0</data>
      <data key="d10">Just to translate the computer science lingo for /u/BombadilEatsTheRing

&gt; O(N*M)

Simplified, this means that the number of operations needed to run the algorithm is proportional to N*M. N and M in this case are the lengths of the two strings being compared.</data>
      <data key="d11">259</data>
      <data key="d12">6.029</data>
      <data key="d13">0</data>
      <data key="d14">10.3</data>
      <data key="d15">0.0386</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e666q4o">
      <data key="d6">e665pt2</data>
      <data key="d0">e666q4o</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">2</data>
      <data key="d9">1537266387.0</data>
      <data key="d10">Just to clarify, are you saying it can't be done? There is no algorithm that will give me edit distance = 1 for the two strings I listed above? If so that is equal parts helpful, disappointing, and baffling.  


Edit: I've updated the OP to reflect my revised goal (in light of this paper). Since my strings have only a very few transpositions (with few internal variations) and are mostly the add/del/sub of single letters, isn't there some way we could limit the algorithm so that it gives me a consistent (if sub-optimal) metric? </data>
      <data key="d11">533</data>
      <data key="d12">5.403</data>
      <data key="d13">0</data>
      <data key="d14">9.4</data>
      <data key="d15">-0.0797</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e6680eg">
      <data key="d6">e667jvl</data>
      <data key="d0">e6680eg</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537267562.0</data>
      <data key="d10">Right. I know I'm way out of my depths here but in the article posted by  [**u/specalight**](https://www.reddit.com/user/specalight) , it seems like the problem is allowing unlimited recursion. Is there some way I could place limits on the algorithm to come up with a sub-optimal solution?   


I'm dealing with human editors and copyists who are adding, omitting, and moving one word here and there. They only occasionally (once or twice per string) move around chunks of text and do so without changing them significantly. It seems like I could find a way to consistently quantify the relationship of these texts to each other without a *perfect* algorithm.   


Any chance you can give me any leads on where to start with that? When I go hunt down a Compsci grad student next week, would any of the algorithms discussed in the secondary literature cited here be a good place to start?</data>
      <data key="d11">887</data>
      <data key="d12">6.391</data>
      <data key="d13">0</data>
      <data key="d14">9.3</data>
      <data key="d15">0.1712</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e67aaq7">
      <data key="d6">e67a19p</data>
      <data key="d0">e67aaq7</data>
      <data key="d7">vidro3</data>
      <data key="d8">1</data>
      <data key="d9">1537317757.0</data>
      <data key="d10">pro tip: cs people love beer and people who have tried things before asking them. even if what you've tried is a bloody mess</data>
      <data key="d11">124</data>
      <data key="d12">4.5</data>
      <data key="d13">0</data>
      <data key="d14">3.3</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66alo4">
      <data key="d6">e666q4o</data>
      <data key="d0">e66alo4</data>
      <data key="d7">jourmungandr</data>
      <data key="d8">3</data>
      <data key="d9">1537270064.0</data>
      <data key="d10">It can be done, but problems in NP are not feasible except on very small problem sets. They take a very long time. What "small" is depends on the specific problem and I'd need to really look for what the bound on the best exact algorithm would be. 

That paper gives an approximation algorithm  that can calculate the metric with a ratio of O(log n). It can give you an estimate of the distance that will be at most a\*log n times larger than the actual distance in O(n\*m) time which isn't bad. It should be runnable in a reasonable amount of time unless your prose is big and you can't deal with it's overestimation.</data>
      <data key="d11">618</data>
      <data key="d12">5.975</data>
      <data key="d13">1</data>
      <data key="d14">8.4</data>
      <data key="d15">0.0464</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e667221">
      <data key="d6">e666q4o</data>
      <data key="d0">e667221</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537266681.0</data>
      <data key="d10">I'm probably misunderstanding technical language but will you humor one more question?

In every string that I'm working with, there are only one or two "blocks" that need to be moved. I'm not dealing with dozens of little blocks in each string. You said there is no *efficient* algorithm to *optimally* solve my problem. Since there are only a very small number of such transpositions in each string, do you think there is a formula that would work for me (if not also for the author's "worst case scenario")?</data>
      <data key="d11">510</data>
      <data key="d12">6.121</data>
      <data key="d13">2</data>
      <data key="d14">7.9</data>
      <data key="d15">-0.1974</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66bfuk">
      <data key="d6">e6680eg</data>
      <data key="d0">e66bfuk</data>
      <data key="d7">Aatch</data>
      <data key="d8">2</data>
      <data key="d9">1537270982.0</data>
      <data key="d10">Honestly, just explaining your problem in detail would probably be enough. Providing the papers you've already found might help, but I don't think it's necessary. Just give as much information as you can and focus on the actual problem you're trying to solve (lest you fall into the XY problem). </data>
      <data key="d11">296</data>
      <data key="d12">5.432</data>
      <data key="d13">0</data>
      <data key="d14">8.6</data>
      <data key="d15">0.0218</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e67b4sq">
      <data key="d6">e67aaq7</data>
      <data key="d0">e67b4sq</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537318427.0</data>
      <data key="d10">The beer thing is good news.  
Unfortunately, I have no computer skills so going on Reddit to hear from you all about things I should keep in mind and literature I should know about was my best attempt at "trying" before asking.  


I'm going to run some of my actual strings (sample posted in the OP now) through a conventional L-D calculator (without block transposition). And then manually do the calculation on a few strings while allowing for block transposition on a simple sample string so I'll have some pre-prepared test cases.  I think that's the best I can do with my limited skill set.</data>
      <data key="d11">597</data>
      <data key="d17">6</data>
      <data key="d13">1</data>
      <data key="d14">10.3</data>
      <data key="d15">0.0447</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66bpqk">
      <data key="d6">e66alo4</data>
      <data key="d0">e66bpqk</data>
      <data key="d7">you-get-an-upvote</data>
      <data key="d8">3</data>
      <data key="d9">1537271293.0</data>
      <data key="d10">&gt; It can be done, but problems in NP are not feasible except on very small problem sets. They take a very long time.

This is not true (though probably a typo?).  NP is a very broad set of problems, including many easy ones.  You're talking about NP-complete (although NP-hard would also work).</data>
      <data key="d11">294</data>
      <data key="d12">5.136</data>
      <data key="d13">0</data>
      <data key="d14">3.8</data>
      <data key="d15">-0.0646</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66brjn">
      <data key="d6">e66alo4</data>
      <data key="d0">e66brjn</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537271350.0</data>
      <data key="d10">What page is that algorithm on?   


And would you be willing to re-state your second paragraph in English prose? I know I'll miss the nuance (and need to get help with its significance down the road) but could you just clarify for me the sense of what that algorithm will (or won't) do? The fault is mine, of course. I've spent the last decade working with dead languages and ignoring math.</data>
      <data key="d11">391</data>
      <data key="d12">5.1</data>
      <data key="d13">0</data>
      <data key="d14">5.3</data>
      <data key="d15">-0.1839</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66c3c3">
      <data key="d6">e667221</data>
      <data key="d0">e66c3c3</data>
      <data key="d7">specalight</data>
      <data key="d8">1</data>
      <data key="d9">1537271724.0</data>
      <data key="d10">Ah yes, not "can't be done" but rather "will take a very very long time if given really long strings and if you won't be satisfied with an approximate/estimated answer".

After scanning over the two papers, it appears that Shapira and Storer focus on a problem involving a near unlimited amount of "move" operations. I believe it would be able to capture a transformation of

```
one two three four -&gt; four two one three
```

as 2 "moves".

While Xia restricts themself to a single "block swap". I believe it would capture the above transformation as 1 "block swap" with additional insertions/substitutions/deletions involved. Xia describes an efficient algorithm for this restricted case.</data>
      <data key="d11">689</data>
      <data key="d12">6.554</data>
      <data key="d13">6</data>
      <data key="d14">9.2</data>
      <data key="d15">-0.3025</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66a4ce">
      <data key="d6">e667221</data>
      <data key="d0">e66a4ce</data>
      <data key="d7">gabe870</data>
      <data key="d8">1</data>
      <data key="d9">1537269566.0</data>
      <data key="d10">I'm not reading super into your question, but I might be able to provide some help.

By "no efficient algorithm" he means that any algorithm that was written to do what you're proposing would take a very long time to run, and therefore would not really be used (or published anywhere).


You can theoretically make an algorithm for pretty much anything, but generally we care about real world constraints like run time. 


The algorithm you are looking for can not be created with a good run time.

So yes, the algorithm you're looking for is possible, but you probably won't find it written anywhere because it would just be a slow brute force method. 


The P=NP thing is just referring to the time constraint thing. Don't look into it too much (unless you're actually going deep into algorithms)</data>
      <data key="d11">798</data>
      <data key="d12">6.604</data>
      <data key="d13">1</data>
      <data key="d14">8.6</data>
      <data key="d15">0.3183</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66dmtf">
      <data key="d6">e66bpqk</data>
      <data key="d0">e66dmtf</data>
      <data key="d7">jourmungandr</data>
      <data key="d8">3</data>
      <data key="d9">1537273627.0</data>
      <data key="d10">Perhaps. But we're talking to a non-CS person so i'm using generalizations. I'm not shooting for perfect technical accuracy but giving them a general idea.  If they mention NP that generally means at least what I said. I know the set of NP is bigger than NP-complete and NP-hard, but 99.9% of the time someone talks about NP... they mean one of those two and any distinction of the other NP problems is very rare.</data>
      <data key="d11">413</data>
      <data key="d12">5.339</data>
      <data key="d13">0</data>
      <data key="d14">5.8</data>
      <data key="d15">0.2103</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66cfeu">
      <data key="d6">e66brjn</data>
      <data key="d0">e66cfeu</data>
      <data key="d7">you-get-an-upvote</data>
      <data key="d8">2</data>
      <data key="d9">1537272121.0</data>
      <data key="d10">It's impossible to design an algorithm that runs "quickly" *and* can guarantee an optimal solution for any example.

&gt; That paper gives an approximation algorithm that can calculate the metric with a ratio of O(log n). It can give you an estimate of the distance that will be at most a*log n times larger than the actual distance in O(n*m) time which isn't bad

In other words, if it fails to find the optimal solution, the authors have proven that the solution it *does* find will only be "a little bit worse" than the optimal solution.

This sounds good, but "small" can mean "completely unpractical" in Computer Science.  What O(log(n)) means is that the ratio between the optimal solution and the one they found is bounded by c/log(n), where 'n' is the size of the strings and 'c' is an unspecified constant (i.e. it might be 1.1 or it might be 100).

There are a number of bounds they give in the paper, but without reading it more thoroughly, I'm not sure they ever bound the constant factor on the solution.

On the bright side, NP-Hard approximation algorithms' bounds are often very pessimistic in practice.  It's entirely possible that this algorithm will work completely fine for you (although it would be hard to prove that it had, in fact, worked perfectly fine).</data>
      <data key="d11">1276</data>
      <data key="d12">7.474</data>
      <data key="d13">4</data>
      <data key="d14">9.5</data>
      <data key="d15">0.3718</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66ehu7">
      <data key="d6">e66brjn</data>
      <data key="d0">e66ehu7</data>
      <data key="d7">jourmungandr</data>
      <data key="d8">1</data>
      <data key="d9">1537274774.0</data>
      <data key="d10">It's section 4, 5, and 6. It's sort of woven into all that text.

It starts by using longest common subsequence to transform the two strings into possibly shorter strings by replacing long common sequences with characters not in the string. Then it uses standard edit distance to to calculate the dynamic programming edit matrix between those two new strings . Then it does some kinda post processing on them to come up with the actual distance estimate.

&amp;#x200B;

As to what it will or won't do. It will quickly calculate a upper bound estimate on the distance. That estimate will be at most 1+a\*log n times bigger than the true optimal distance (a is not specified, and i'm not sure what n is in that context). Buried down at the very bottom of the proof for lemma 10, just before lemma 11, the authors say they did some empirical tests and found a the largest approximation error measured was 6x. So the distance returned was 6 times larger than the real distance, but it was usually much less. They say that number came from a Senior thesis, but it does not seem to be published anywhere.</data>
      <data key="d11">1094</data>
      <data key="d12">6.758</data>
      <data key="d13">0</data>
      <data key="d14">7.9</data>
      <data key="d15">0.0487</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66cxfp">
      <data key="d6">e66c3c3</data>
      <data key="d0">e66cxfp</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537272733.0</data>
      <data key="d10">&gt;I believe it would be able to capture a transformation of

Could you clarify what "it" is in this sentence? Do they give an algorithm in their paper that would work for limited purposes?

Most of my data looks something like this (but longer):

1. **ab**cde
2. cdef**ab**

So I need a program that will count the transposition of "ab" as one edit (not two) and the addition "f" as one edit. So for these two sequences I would want edit distance = 2.</data>
      <data key="d11">450</data>
      <data key="d12">5.281</data>
      <data key="d13">3</data>
      <data key="d14">6.2</data>
      <data key="d15">0.0617</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66c40k">
      <data key="d6">e66a4ce</data>
      <data key="d0">e66c40k</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537271746.0</data>
      <data key="d10">Thank you so much for the clarification. That gives me some hope after all!   


I have a very limited and specific application (and I can further limit its scope if the run-time is obscene). Brute forcing something is totally fine for me. It's perfectly fine for my purposes if the operation takes hours or even days. This is for a single chapter in my dissertation so I can literally spend the next few years running the calculator on my data.  


Would a competent programmer/computer scientist be able to write up an algorithm to do what I need if I provided them with the Shapira &amp; Storer article? Is there something else I should have on hand or some restrictions that I should stipulate (lest the problem seem unwieldy)? </data>
      <data key="d11">728</data>
      <data key="d12">6.204</data>
      <data key="d13">0</data>
      <data key="d14">9.5</data>
      <data key="d15">0.2495</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66flts">
      <data key="d6">e66dmtf</data>
      <data key="d0">e66flts</data>
      <data key="d7">you-get-an-upvote</data>
      <data key="d8">3</data>
      <data key="d9">1537276364.0</data>
      <data key="d10">For the non-CS people in the room, here are the lay-man definitions:

NP: Yes-no problems whose solution can be verified quickly.  I.e. if I claim "the best answer is X" you can make sure I'm not lying quickly.  Many of these can be solved quickly (or even trivially).

NP-Hard: Yes-no problems that are "at least as hard" as the hardest problem in NP.  They are so hard that it is unlikely that we will ever come up with fast algorithms to solve any of them.

NP-Complete: Yes-no problems that can be verified quickly (i.e. in NP), but are also super hard so solve directly.

I try not to make corrections that are merely technical.  Ignoring the technicalities, conflating NP with NP-Complete or NP-Hard goes against the general gist that these sets are meant to capture.

Edit: though conflating NP-Hard and NP-Complete is probably forgivable if you're communicating with non-CS people and just want to convey the concept of "hardness".  Especially because proving a problem is NP-Complete after proving it is NP-Hard is often easy.</data>
      <data key="d11">1035</data>
      <data key="d12">7.961</data>
      <data key="d13">3</data>
      <data key="d14">8.3</data>
      <data key="d15">0.1311</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66dn32">
      <data key="d6">e66cfeu</data>
      <data key="d0">e66dn32</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537273636.0</data>
      <data key="d10">Thank you for your patience! That's helpful. I'm sure my situation is much simpler than their ideal hard case. For me a string represents words in a manuscript of one short story from the gospels.

&gt;It's entirely possible that this algorithm

Can you point me to the algorithm that you are suggesting might work for me? Are you referring to something specific in the S&amp;S article? If so, I'd like to have it highlighted when I do approach a comp sci person for help. </data>
      <data key="d11">466</data>
      <data key="d12">5.441</data>
      <data key="d13">0</data>
      <data key="d14">6.4</data>
      <data key="d15">0.3083</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66ey41">
      <data key="d6">e66ehu7</data>
      <data key="d0">e66ey41</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537275411.0</data>
      <data key="d10">Six times larger than the optimal answer would certainly be a problem! 

I think I've probably exhausted the patience of you kind computer wizards. I'll take the S&amp;S article, the Xia article, and maybe the Lopresti &amp; Tomkins article to someone who can actually understand the algorithmic stuff. 

Thank you very much! I'd buy you all a beer if I could. Anyways I'll report back with whatever measure of success I have. Please feel free to continue here or drop me anything else you find on the subject but I'll stop pestering y'all with clarifying questions.</data>
      <data key="d11">558</data>
      <data key="d12">5.895</data>
      <data key="d13">0</data>
      <data key="d14">7.4</data>
      <data key="d15">0.2053</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66ennb">
      <data key="d6">e66cxfp</data>
      <data key="d0">e66ennb</data>
      <data key="d7">specalight</data>
      <data key="d8">1</data>
      <data key="d9">1537274999.0</data>
      <data key="d10">By "it" I was referring to how they modeled/defined the problem and allowed operations.

Based on the data you provided, Xia's described algorithm would appear to be sufficient for your needs.

Shapira and Storer provide an approximation algorithm (guaranteed to provide a result within a certain range of the optimal answer) in their paper.</data>
      <data key="d11">341</data>
      <data key="d12">5.894</data>
      <data key="d13">1</data>
      <data key="d14">11.5</data>
      <data key="d15">0.0518</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66cu98">
      <data key="d6">e66c40k</data>
      <data key="d0">e66cu98</data>
      <data key="d7">gabe870</data>
      <data key="d8">1</data>
      <data key="d9">1537272624.0</data>
      <data key="d10">If you fully describe what you're trying to do, and have example cases (several of them), you can probably give this to an undergrad student. 

That being said, I really haven't tried to fully understand what you're making.


What defines the "chunks" you're moving around? 
Is a chunk just any continuous set of characters found in both strings?</data>
      <data key="d11">346</data>
      <data key="d12">5.46</data>
      <data key="d13">1</data>
      <data key="d14">6.6</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e67fp1p">
      <data key="d6">e66flts</data>
      <data key="d0">e67fp1p</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">2</data>
      <data key="d9">1537322084.0</data>
      <data key="d10">I'm going to revisit this part of the thread when I have to explain in my dissertation chapter why I can't simply plug my data into "the perfect algorithm" that allows block transpositions. I'll have to do some outside reading to figure out what "NP" is in the first place but I really appreciate all your dialog here!</data>
      <data key="d11">318</data>
      <data key="d12">5.312</data>
      <data key="d13">2</data>
      <data key="d14">13.4</data>
      <data key="d15">0.4244</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66h689">
      <data key="d6">e66dn32</data>
      <data key="d0">e66h689</data>
      <data key="d7">you-get-an-upvote</data>
      <data key="d8">1</data>
      <data key="d9">1537278781.0</data>
      <data key="d10">To be clear, I do not know how Shapira's algorithm works (though /u/jourmungandr seems correct that it is sections 4, 5, and 6).  I was just generalizing from the NP-approximation algorithms I've used and things professors have told me.  In general knowing whether an algorithm works "in practice" generally necessitates actually trying it on the domain you're interested in :(

Xia's algorithm (block-swapping) looks substantially easier to implement, although substantially slower, perhaps to the point of infeasibility.  It takes them around 3 seconds to compare two strings of length 15, and they claim their algorithm's running time will increase O(|X|\^4 |Y|\^4), which means doubling the length of both strings will cause the time to increase by a factor of 256.  So for strings of length 120, this becomes a staggering 1.6 years.  On the bright side, they have some pre-processing that let's them cut it down to around 100ms (instead of 3 seconds), which cuts the estimate for 120-long strings to around 20 days, but at the cost of decreased accuracy.  It's also possible that if you assume you'll never want to edit inside a word (e.g. "go" -&gt; "going") you could cut down the time some more (by a factor of 4?) but I'm not sure if that's a reasonable assumption.

Edit: I'd also expect them to actually run their algorithm on "real world text" if they could get it to run quickly enough, which also makes me a little scared.

I'll take a closer look at Shapira's algorithm tomorrow (their paper looks a little scary though!)

This is a very interesting problem.  I'm not sure if I envy you or pity you :p</data>
      <data key="d11">1613</data>
      <data key="d12">7.129</data>
      <data key="d13">4</data>
      <data key="d14">10.3</data>
      <data key="d15">0.0378</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66z9i6">
      <data key="d6">e66ey41</data>
      <data key="d0">e66z9i6</data>
      <data key="d7">jourmungandr</data>
      <data key="d8">2</data>
      <data key="d9">1537308291.0</data>
      <data key="d10">You haven't exhausted my patience yet. In fact you done gone and nerd sniped me. I mostly do DNA sequencing analysis and algorithms so string to string comparison is a big thing in my world. What we're talking about is called natural language processing (NLP) and it's a big subject that I only know a little about. 

That being said the algorithms discussed so far are all sort of worst case. The hard part is the huge number of ways to rearrange the string. If you have a source string of length L then the number of rearrangements of that string is L! which is a really big number. You mention your L is ~200 in some of the other threads and log10(200!)~373 or in English 200! is a number about 373 digits long^1. That worst case only happens if all 200 characters are distinct though. These algorithms assume that worst case is valid but given we're talking about comparing prose to prose the orthography and semantics of the underlying language is going to render 99% of those permutations complete meaningless gibberish. So if I had to do this problem myself I'd start by reducing the problem. I would break your prose into semantic "atoms" that have meaning to your analysis first.

NLP has a concept called stemming where you replace words with regularized versions of themselves. Plural words are collapsed to their root, irregular verbs turned back into their semantic root, tenses are removed, spelling normalized, etc. So say it and its become "*it" where the * means basically the semantic meaning of it; or they, their, and them becomes just *them. There are libraries to do stemming on modern languages. (You never said you were working with a modern language, for all I know you're analyzing Linear-B or something. Heck I'm not entirely sure you're target is alphabet based vs an abjad.) You have a pretty small corpus, so it may be best to stem it yourself manually, or at least use a stemmer software to do the easy stuff then go back and clean it up manually. Come up with a table that maps word to a semantic index. Then you replace each word with it's index into that table, which can just be a letter 0-9a-zA-Z gets you pretty far. Then transform your source and targets into that space, by replacing each word with it's letter/index. This also squeezes out white-space which the original problem formation is also working with.

Now you have a much smaller problem to deal with. You may want to just rephrase your problem at this level and measure the distance between these "semantic strings" using an algorithm that only considers block moves and insertion/deletion. That's still going to be slow because the block moves are still present. But assuming the word length in the corpus is average 4 letters long, your problem of size ~200 becomes a problem of size ~38 (assuming each word comes with a space after it which we remove). That may still not be feasible but it's much easier than the original given that we are talking about algorithms with relatively high order time complexity. That is the runtime grows very fast with the size of the problem, so reducing the size of the problem will help a lot.

If you want something closer to  the actual original distance, it won't be the exact answer but I'd have to really think about what the difference would be, you would want the previous algorithm to return the actual edit operations rather than the distance by itself. Then you can do the transformation of the original strings with all their mispellings and tenses by following the block move instructions from the edit operations. Then calculate a normal Levenstein distance on this transformed string and add the number of block moves to get your final distance.

Notes:
1. That's by the logarithmic form of Sterling's approximation given the first two terms of the series i.e. (200*ln(200) - 200)/ln(10) so the actual number is a little bigger then that.</data>
      <data key="d11">3891</data>
      <data key="d12">9.864</data>
      <data key="d13">3</data>
      <data key="d14">8.1</data>
      <data key="d15">-0.1042</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e66f48l">
      <data key="d6">e66ennb</data>
      <data key="d0">e66f48l</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537275655.0</data>
      <data key="d10">I think Xia's algorithm only works if the blocks are adjacent.

  
In any case, thank you! I'll take the S&amp;S article, the Xia piece, and the [Lopresti &amp; Tomkins](https://www.sciencedirect.com/science/article/pii/S030439759600268X) article to someone who can actually understand the algorithmic material in the papers.  


I'll report back with whatever success I have. Feel free to drop me any thing else you think I'll find helpful but I'll stop pestering you with clarifying questions now. Thank you for your patience and help! </data>
      <data key="d11">530</data>
      <data key="d12">7.016</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.194</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66dvea">
      <data key="d6">e66cu98</data>
      <data key="d0">e66dvea</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537273933.0</data>
      <data key="d10">As I had conceived of it, a block or chunk could be any continuous set of characters. Would it help in making the algorithm if I stipulated that the "block" had to be at least three characters long? I'm certain that would not undermine the analysis -- would it help with programming?</data>
      <data key="d11">283</data>
      <data key="d12">5.895</data>
      <data key="d13">1</data>
      <data key="d14">7.6</data>
      <data key="d15">0.217</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e678xjb">
      <data key="d6">e66h689</data>
      <data key="d0">e678xjb</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537316664.0</data>
      <data key="d10">Thank you for this! 
Yes, 1.6 years per string would be a problem. I think the problem with Xia's algorithm is that it only allows for the transposition of adjacent blocks.

I think I should clarify something. I'm working on a prose text (manuscripts of the gospels) but I've already transposed each word into a symbol. 

So here's an actual example of one of my strings:
2a,bcdbefg:9hijk21m1nop12qfrs2tu;o1v2w2xftyb2qfzABCDEFG1H2I+1JKLMN?OP

Here's another string (same story, different manuscript):
2a,bcבb2e9hYjk2גm1nopo2qfrs2αu;o1v2w2דftyb2qfzACDEGF1H2I+1JKLMNOP

Unfortunately, this example doesn't have an blocks that need to be transposed but it gives you a sense of what I'm working with.</data>
      <data key="d11">696</data>
      <data key="d12">7.241</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.05</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e67afj8">
      <data key="d6">e66z9i6</data>
      <data key="d0">e67afj8</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">2</data>
      <data key="d9">1537317866.0</data>
      <data key="d10">Not linear-B but ancient Greek!  
The language shouldn't matter because I've transcribed each word as an individual symbol. I've added an "edit" to the OP showing two examples of the strings I'm using. I'll plug them in here.

**String 1:**  
2a,bcdbefg:9hijk21m1nop12qfrs2tu;o1v2w2xftyb2qfzABCDEFG1H2I+1JKLMN?OP

**String 2:**  
2a,bcבb2e9hYjk2גm1nopo2qfrs2αu;o1v2w2דftyb2qfzACDEGF1H2I+1JKLMNOP  


I don't think there are any block movements that it would be important to detect in these two strings... so here, a normal L-D distance calculator would probably work, right?   


Does this help clarify my problem?  


Note:   
On my current transcription system, capitalization matters.

&amp;#x200B;</data>
      <data key="d11">697</data>
      <data key="d12">6.349</data>
      <data key="d13">1</data>
      <data key="d14">7.2</data>
      <data key="d15">-0.0296</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66gjoi">
      <data key="d6">e66dvea</data>
      <data key="d0">e66gjoi</data>
      <data key="d7">gabe870</data>
      <data key="d8">1</data>
      <data key="d9">1537277778.0</data>
      <data key="d10">Ah, no, I think that just gets you into more trouble. If a block needs to be 3 characters long, then what do I call it when I move 2 characters? You know?

I was really trying to ask if there are specific sets of characters you're looking for, or if a block is any continuous set of characters that will remain together in the final form.

Once you form a "block" could you then cut it into two blocks, or are they permanent? 

These sorts of questions need to be understood so that someone really knows what you're asking for. (And you may have covered that else where. As I said I'm not reading most of this thread).


The most important thing will be to really think about what you want. So like... "ababa" and "aaabb" you cold go from "Ababa" to "[aa][bb]a" to "[AAA][bb]" in 2 swaps? 

How about "abcaba" to "aaacbb"... Would you go "abcaba" to "ab[cb][aa]" to "a[cbb][aa]" to "[aaa][cbb]" in 3 swaps? 
Are there times when you could swap things multiple ways to get the same ideal answer? Does it matter? 


Sorry, I'm just a rambling tired guy... This might not make sense... But the most important thing with stuff like this is to explicitly think through exactly what you want, and come up with some rules to do it. </data>
      <data key="d11">1225</data>
      <data key="d12">6.486</data>
      <data key="d13">12</data>
      <data key="d14">5.2</data>
      <data key="d15">-0.0311</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e67bm2a">
      <data key="d6">e67afj8</data>
      <data key="d0">e67bm2a</data>
      <data key="d7">jourmungandr</data>
      <data key="d8">1</data>
      <data key="d9">1537318810.0</data>
      <data key="d10">Heh, well that's exactly what I was describing doing in my last post. So the L=200 was these strings that have already been transcribed?

Given the definition of your desired distance where every operation has equal weight 1 (block move, substitution, insertion/deletion all cost 1) the Levenshtein distance is already a upper bound of the distance. i.e. you wouldn't move the block if it makes the distance worse.

If you're willing to limit your search to a maximum distance you can do a depth limited search (i.e. only allow 2 block swaps). That might be feasible, which was a suggestion offered in a different branch of the thread.

Also what's the hypothesis you're trying to prove exactly? There may be a more tractable similarity/distance that might be use-able.</data>
      <data key="d11">769</data>
      <data key="d12">6.624</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.025</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e67cx1v">
      <data key="d6">e67bm2a</data>
      <data key="d0">e67cx1v</data>
      <data key="d7">BombadilEatsTheRing</data>
      <data key="d8">1</data>
      <data key="d9">1537319867.0</data>
      <data key="d10">Yes, an algorithm that allows up to two substring transpositions would work perfectly! Does the [S&amp;S paper](https://www.sciencedirect.com/science/article/pii/S157086670600030X) (or maybe the  the ["Boehmer &amp; Rees 2008 modification"](https://github.com/GlobalNamesArchitecture/damerau-levenshtein/blob/master/README.md) to the D-L calculator described here) provide enough info for a comp sci person to write such an algorithm for me?

One foreseeable problem is that the substrings may not be identical. So if the block "ACDEGF" from string #2 was moved to the beginning of the string, I would hope that the calculator could recognize that as the same substring as "ABCDEFG" from string 1 even though "B" is omitted and "FG" are flipped. Another solution suggested in another thread was that I do the block movements myself (I think he called it "pre-sorting the data) and then run the strings through a conventional L-D calculator. This would be taxing given all of my data and introduce some subjectivity into the process but may be workable as a last resort.

&amp;#x200B;

The argument is one part of a single chapter in my dissertation. Rather simply, I'm trying to prove that certain strings are more similar to each other than others. So I want to argue that string 1 and 2 (given above) are closer to eachother than string 3 (below) is to either.

**String 3**

Q3o;1RSfTU2VcWXfeg9hYjk2m1nZoers2αwo1v2qf1βzACDEFG1H2γ1δεMN?OP

In this case, it's painfully obvious that 1 and 2 are more similar than string 3 is to either of them. Except for small sections, they don't even look like the same strings. But this is an easy case. There lots of more questionable cases.

So I'm working on select stories in manuscripts of the gospels. For each story I have nine strings (=nine manuscripts) that each need to be compared with each other. I haven't decided how many stories (=sets of nine strings) I'm going to do this with. Probably about 20.

&amp;#x200B;</data>
      <data key="d11">1950</data>
      <data key="d12">8.392</data>
      <data key="d13">5</data>
      <data key="d14">8.1</data>
      <data key="d15">-0.0427</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="9gkn0j">
      <data key="d0">9gkn0j</data>
      <data key="d1">SQLite v3.25.0 released. Critical bugs fixed. Enhanced ALTER TABLE.</data>
      <data key="d2">0</data>
      <data key="d3">0.74</data>
      <data key="d4">37</data>
      <data key="d5">0</data>
    </node>
    <node id="e64vree">
      <data key="d6">9gkn0j</data>
      <data key="d0">e64vree</data>
      <data key="d7">ReginaldIII</data>
      <data key="d8">16</data>
      <data key="d9">1537225657.0</data>
      <data key="d10">The field of Computer Science will never be the same.</data>
      <data key="d11">53</data>
      <data key="d12">4.3</data>
      <data key="d13">0</data>
      <data key="d14">4.8</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e64ujfd" />
    <node id="e64y613" />
    <node id="e66pbbn">
      <data key="d6">9gkn0j</data>
      <data key="d0">e66pbbn</data>
      <data key="d7">ZaynThomas</data>
      <data key="d8">0</data>
      <data key="d9">1537295711.0</data>
      <data key="d10">Thankyou for update I've been looking for it.

Visit our new app - knowledge search engine app 

[http://www.heuroapp.com/](http://www.heuroapp.com/)</data>
      <data key="d11">149</data>
      <data key="d12">8.2</data>
      <data key="d13">0</data>
      <data key="d14">7.8</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e64xfo0">
      <data key="d6">e64vree</data>
      <data key="d0">e64xfo0</data>
      <data key="d7">celerym</data>
      <data key="d8">1</data>
      <data key="d9">1537227129.0</data>
      <data key="d10">It never was, it never was.</data>
      <data key="d11">27</data>
      <data key="d17">5</data>
      <data key="d13">0</data>
      <data key="d14">2.1</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66vt29">
      <data key="d6">e64vree</data>
      <data key="d0">e66vt29</data>
      <data key="d7">asdqqqq</data>
      <data key="d8">1</data>
      <data key="d9">1537304824.0</data>
      <data key="d10">We will put our best Knuth on it!</data>
      <data key="d11">33</data>
      <data key="d12">3.125</data>
      <data key="d13">0</data>
      <data key="d14">-0.8</data>
      <data key="d15">0.6696</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66vmxd">
      <data key="d6">e66pbbn</data>
      <data key="d0">e66vmxd</data>
      <data key="d7">ProgrammerBro</data>
      <data key="d8">2</data>
      <data key="d9">1537304634.0</data>
      <data key="d10">You're literally doing everything wrong here.

Self-promotion in an unrelated post? Check.

As for your site,

Time to first render over 10 seconds? Check.

Scroll jacking for no reason? Check.</data>
      <data key="d11">193</data>
      <data key="d12">5.63</data>
      <data key="d13">0</data>
      <data key="d14">5.0</data>
      <data key="d15">-0.1104</data>
      <data key="d16">Negative</data>
    </node>
    <node id="9ggj4h">
      <data key="d0">9ggj4h</data>
      <data key="d1">My C Project: Need a few more brains</data>
      <data key="d2">0</data>
      <data key="d3">0.31</data>
      <data key="d4">0</data>
      <data key="d5">0</data>
    </node>
    <node id="e641gxi" />
    <node id="e665pw5" />
    <node id="97s8dl">
      <data key="d0">97s8dl</data>
      <data key="d1">On natural selection of the laws of nature, Artificial life and Open-ended evolution, Universal Darwinism, Occam's razor</data>
      <data key="d2">0</data>
      <data key="d3">0.8</data>
      <data key="d4">55</data>
      <data key="d5">0</data>
    </node>
    <node id="e4auegy">
      <data key="d6">97s8dl</data>
      <data key="d0">e4auegy</data>
      <data key="d7">sagaciux</data>
      <data key="d8">8</data>
      <data key="d9">1534466256.0</data>
      <data key="d10">I think your problem as currently stated is too open ended. Since your goal is to build a specific mathematical model, you're going to need a precise definition of what you want to achieve. Right now, the phrase "create the simplest model possible in which the evolution of the laws of nature arises from the natural selection of structures" is too ambiguous for me to unpack: what laws of nature are you looking to express? What structures are you selecting from? How do you define the process of evolution/natural selection? How would you know if your model was simpler or more complex?

The problem may become more clear if it is separated into smaller parts. I think philosophy can be open-ended and contradictory, but a model needs precise definitions. At minimum, a model needs rules and an initial state. Before trying to figure out these things, I would want to know: what do I want my model to demonstrate? Given a particular state, what should the next state look like? If the model should be simple, then I would want to include only the most relevant behaviors and states. What information does my model at minimum to function, and how much of it?</data>
      <data key="d11">1159</data>
      <data key="d12">7.75</data>
      <data key="d13">1</data>
      <data key="d14">8.2</data>
      <data key="d15">0.0535</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4apf0r">
      <data key="d6">97s8dl</data>
      <data key="d0">e4apf0r</data>
      <data key="d7">WeirdEidolon</data>
      <data key="d8">5</data>
      <data key="d9">1534462083.0</data>
      <data key="d10">NEAT might check a lot of the boxes you're looking for (I haven't browsed through your link yet)

https://en.m.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies</data>
      <data key="d11">169</data>
      <data key="d12">7.789</data>
      <data key="d13">0</data>
      <data key="d14">10.7</data>
      <data key="d15">0.5766</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4akr6z">
      <data key="d6">97s8dl</data>
      <data key="d0">e4akr6z</data>
      <data key="d7">Rococoon</data>
      <data key="d8">3</data>
      <data key="d9">1534458001.0</data>
      <data key="d10">When do you want to start working on it? I think it is super interesting and I would like to help you think about it, however I am super busy right now... I do think that I might be able to help though given my background. </data>
      <data key="d11">223</data>
      <data key="d12">5.273</data>
      <data key="d13">0</data>
      <data key="d14">4.5</data>
      <data key="d15">0.4731</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4bpisq" />
    <node id="e4bul16" />
    <node id="e4akyzn">
      <data key="d6">97s8dl</data>
      <data key="d0">e4akyzn</data>
      <data key="d7">noam_compsci</data>
      <data key="d8">2</data>
      <data key="d9">1534458202.0</data>
      <data key="d10">Page not found on the kiwi link</data>
      <data key="d11">31</data>
      <data key="d12">3.571</data>
      <data key="d13">0</data>
      <data key="d14">0.1</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4al1uq">
      <data key="d6">97s8dl</data>
      <data key="d0">e4al1uq</data>
      <data key="d7">Anonymous</data>
      <data key="d8">2</data>
      <data key="d9">1534458274.0</data>
      <data key="d10">[deleted]</data>
      <data key="d11">9</data>
      <data key="d17">7</data>
      <data key="d13">0</data>
      <data key="d14">8.4</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4bmx7u" />
    <node id="e4cbzu0">
      <data key="d6">97s8dl</data>
      <data key="d0">e4cbzu0</data>
      <data key="d7">Anonymous</data>
      <data key="d8">2</data>
      <data key="d9">1534521766.0</data>
      <data key="d10">[deleted]</data>
      <data key="d11">9</data>
      <data key="d17">7</data>
      <data key="d13">0</data>
      <data key="d14">8.4</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4celt3">
      <data key="d6">97s8dl</data>
      <data key="d0">e4celt3</data>
      <data key="d7">Meguli</data>
      <data key="d8">2</data>
      <data key="d9">1534527325.0</data>
      <data key="d10">Chaitin might have material that can inspire you. </data>
      <data key="d11">50</data>
      <data key="d12">5.125</data>
      <data key="d13">0</data>
      <data key="d14">6.4</data>
      <data key="d15">0.5719</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4chpbg" />
    <node id="e4digjl">
      <data key="d6">97s8dl</data>
      <data key="d0">e4digjl</data>
      <data key="d7">zergling_Lester</data>
      <data key="d8">2</data>
      <data key="d9">1534568090.0</data>
      <data key="d10">1. Much cleverer people tried that before, what makes you think that you can do better? Ignorance.

2. Go pirate and read https://en.wikipedia.org/wiki/Gödel,_Escher,_Bach, this will get you up to speed with the 1970s state of the art of that stuff and make you realize how much you don't know in the process. Also, it's so damn enjoyable, to be honest with you fam. Anyways, it'd provide a perfect starting point into more serious inquiries.</data>
      <data key="d11">442</data>
      <data key="d12">5.836</data>
      <data key="d13">0</data>
      <data key="d14">5.5</data>
      <data key="d15">0.2138</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4c5w4j" />
    <node id="e4i9yyk">
      <data key="d6">97s8dl</data>
      <data key="d0">e4i9yyk</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534783212.0</data>
      <data key="d10">Comments from other sources:</data>
      <data key="d11">28</data>
      <data key="d17">6</data>
      <data key="d13">0</data>
      <data key="d14">3.7</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66j7eq" />
    <node id="e4akxsl" />
    <node id="e4aznhr">
      <data key="d6">e4auegy</data>
      <data key="d0">e4aznhr</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534470573.0</data>
      <data key="d10">The most of problems you mention (if not all) I tried to address or at least mention in the [section 0 of the article](https://kiwi0fruit.github.io/ultimate-question/#s0). And in particular in the [0.1 subsection](https://kiwi0fruit.github.io/ultimate-question/#s0_1). I'm aware that I'm still far from understanding...

&gt; what do I want my model to demonstrate?

It should be the model of open ended evolution (artificial life) (OEE). OEE means that individuals in the model with natural selection don't stop on some fixed level of complexity but keep evolving (like life kept evolving from unicellular life to homo sapiens). But at the same time the model should be simple enough to be (like) self-justifying from philosophical reasoning (that was addressed in the mentioned section 0.1).

&gt; Given a particular state, what should the next state look like?

If I'm to know the answer to this question then I've already had understood the model workings and I simply need to write them down in some language. That's clearly not the case now as I still lack understanding of how it should work in details.

As about "separating into smaller parts"... I have problems with that.

The name of the article is not mentioned here but it's "The Ultimate Question of Life, the Universe, and Everything". And there is a reason for it. Well enough justified (from philosophical point of view) model of open ended evolution would be a very good candidate to answer The Question. And I have no hope that such a question can be solved by splitting to smaller parts. I also can tell that all that I know about this problem suggests that it cannot be split to smaller components. But it's only my intuition so it's not an argument...
</data>
      <data key="d11">1719</data>
      <data key="d12">8.644</data>
      <data key="d13">2</data>
      <data key="d14">8.2</data>
      <data key="d15">0.0547</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4apf4w">
      <data key="d6">e4apf0r</data>
      <data key="d0">e4apf4w</data>
      <data key="d7">HelperBot_</data>
      <data key="d8">1</data>
      <data key="d9">1534462086.0</data>
      <data key="d10">Non-Mobile link: https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies
***
^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^204972</data>
      <data key="d11">222</data>
      <data key="d12">7.125</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.0795</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4apf88">
      <data key="d6">e4apf0r</data>
      <data key="d0">e4apf88</data>
      <data key="d7">WikiTextBot</data>
      <data key="d8">1</data>
      <data key="d9">1534462088.0</data>
      <data key="d10">**Neuroevolution of augmenting topologies**

NeuroEvolution of Augmenting Topologies (NEAT) is a genetic algorithm (GA) for the generation of evolving artificial neural networks (a neuroevolution technique) developed by Ken Stanley in 2002 while at The University of Texas at Austin. It alters both the weighting parameters and structures of networks, attempting to find a balance between the fitness of evolved solutions and their diversity. It is based on applying three key techniques: tracking genes with history markers to allow crossover among topologies, applying speciation (the evolution of species) to preserve innovations, and developing topologies incrementally from simple initial structures ("complexifying").

***

^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/compsci/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]
^Downvote ^to ^remove ^| ^v0.28</data>
      <data key="d11">1150</data>
      <data key="d12">10.315</data>
      <data key="d13">1</data>
      <data key="d14">17.8</data>
      <data key="d15">0.0468</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4amw9i">
      <data key="d6">e4akr6z</data>
      <data key="d0">e4amw9i</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534459909.0</data>
      <data key="d10">Actually I worked on it till summer of 2016. The article by link is a compilation of what I was able to figue out (mostly guesses and questions with details) - I've recently added final bits to the 2016 article and started to search for help once again - I feel like I've reached my limit or burnt out.

If you feel like you have thoughts or anything useful please do not hesitate to [comment here](https://github.com/kiwi0fruit/ultimate-question/issues/2) or even make a pull request to [the repo](https://github.com/kiwi0fruit/ultimate-question) (or communicate any other way you like).

I'm also going to be busy from now on but "It does not matter how slowly you go as long as you do not stop" :)
</data>
      <data key="d11">701</data>
      <data key="d12">6.386</data>
      <data key="d13">1</data>
      <data key="d14">9.6</data>
      <data key="d15">0.4997</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4eahki">
      <data key="d6">e4akr6z</data>
      <data key="d0">e4eahki</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534598699.0</data>
      <data key="d10">You might be interested in the **UPD** section I added to the main post. There is a short description of the assumptions that make the task look feasible. They are the core of the research idea.</data>
      <data key="d11">194</data>
      <data key="d12">5.067</data>
      <data key="d13">0</data>
      <data key="d14">4.4</data>
      <data key="d15">0.134</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4alo5d">
      <data key="d6">e4akyzn</data>
      <data key="d0">e4alo5d</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">2</data>
      <data key="d9">1534458839.0</data>
      <data key="d10">thanks! fixed.</data>
      <data key="d11">14</data>
      <data key="d12">5.5</data>
      <data key="d13">0</data>
      <data key="d14">-3.1</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4alv3q">
      <data key="d6">e4al1uq</data>
      <data key="d0">e4alv3q</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">-2</data>
      <data key="d9">1534459012.0</data>
      <data key="d10">&gt; [The Origins of Order: Self-Organization and Selection in Evolution](https://www.amazon.com/Origins-Order-Self-Organization-Selection-Evolution/dp/0195079515).  
&gt;
&gt; I'm not aware of too many articles, but you could try [this one](https://www.sccs.swarthmore.edu/users/08/bblonder/phys120/docs/kauffman.pdf) co-authored by
Kaufmann a few years before the book was published.  
&gt; (u/[deleted])

After few years of research (2014-2016 mostly) I think about all **books** on the topic with a **great** scepsis. May be you know if there is an article on the topic? But still thank you!

**UPD**

Shame on me: I've forgot that such books in most cases have assosiated article(s) - for example books by Lee Smolin about time have a nice short article on the same topic: "Temporal naturalism".</data>
      <data key="d11">788</data>
      <data key="d12">7.566</data>
      <data key="d13">1</data>
      <data key="d14">11.4</data>
      <data key="d15">0.1052</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4ccl57">
      <data key="d6">e4cbzu0</data>
      <data key="d0">e4ccl57</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534522994.0</data>
      <data key="d10">&gt;Hello, the title of this post caught my eye. I knew it would be some sort of ultimate question
&gt;about everything.
&gt;
&gt;I love how ambitious you are - trying to define the problem and solve it in one post on
&gt;reddit). Perhaps you’re underestimating the complexity of both processes.
&gt;
&gt;This topic, or problem, you’re talking about is so complex that it’s extremely hard to define it
&gt;in words that would describe its true nature. It’s interesting how people can still understand
&gt;what you’re talking about. It seems to me you’re looking for a not just a theory, but a
&gt;mathematical model of everything. It is important to note that this question deals with
&gt;consciousness because the nature of universe consists of objective nature (quantitative)
&gt;and subjective nature (qualitative).
&gt;
&gt;Let’s start by defining the problem correctly...
&gt;
&gt;Some people who have commented claim that your original question is too ambiguous to
&gt;be the definition of the problem being solved by a computational model. You mention
&gt;“evolution of laws of nature” and “natural selection of structure” and it doesn’t seem clear to
&gt;me what exactly you’re talking about.
&gt;
&gt;You seem to be trying to define current state of the world, universe, or everything. With this
&gt;information you could predict how it originated and how exactly it will change in the future.
&gt;This is the “simple” model you’re looking for.
&gt;
&gt;I think a better way of phrasing this problem is to be less ambiguous and more precise with
&gt;what you’re talking about. If you want a simple answer, ask a simple question.
&gt;
&gt;How - exactly - does everything operate, based on the current state of everything?
&gt;
&gt;Despite the lack of specificity, would you agree that this a more well-defined problem? To
&gt;me, using the word “everything” is easier and more useful than trying to define everything
&gt;because we all can agree on what we’re referring to when we say “everything”: the universe.
&gt;The universe is an example of a complex system. A complex system is any system featuring
&gt;a large number of interacting components (agents, processes, etc.) whose aggregate
&gt;activity is nonlinear (not derivable from the summations of the activity of individual
&gt;components) and typically exhibits hierarchical self-organization under selective pressures
&gt;Saying the laws of nature and structure leads one to think these systems are separate when
&gt;they are in fact both part of one complex system we can refer to as “everything”.
&gt;Understanding exactly what everything means requires an unimaginable amount of power.
&gt;Everything includes every single thing in existence and everything at once - everything that
&gt;has ever existed and everything that will exist. Everything is an objective thing with
&gt;quantifiable features like the laws of physics that is only observed through subjective things
&gt;like human beings and other biological organisms. It is important to note that the definition
&gt;of “everything” is different from person to person, however everyone can agree that the
&gt;word makes sense to represent everything in their world (or perception).
&gt;
&gt;So, you might ask, if everything is so hard to define, what would be computed to predict the
&gt;future?
&gt;
&gt;Well, some things just don’t need to be defined by all of its physical attributes to be used for
&gt;some purpose. Usually, complex systems are defined by emergent properties that come
&gt;about because of interactions among the parts. A classic traffic roundabout is a good
&gt;example, with cars moving in and out with such effective organization. How can people
&gt;predict the flow of traffic to drive safely to their destination? This seems obvious if you have
&gt;experience driving on a populated roadway. These drivers don’t know everything about this
&gt;roundabout (how it was built, the names of the drivers in the other cars), but they know
&gt;how they function. This only requires part of an understanding of a roundabout. Another
&gt;example the phenomenon of life as studied in biology - it is an emergent property of
&gt;chemistry, and psychological phenomena emerge from the neurobiological phenomena of
&gt;living things.
&gt;
&gt;From Wikipedia, “Emergence Theory” - Whenever there is a multitude of individuals
&gt;interacting, an order emerges from disorder; a pattern, a decision, a structure, or a change
&gt;in direction occurs.
&gt;
&gt;(I’m only quoting Wikipedia because it’s an example of an emergent property of human
&gt;communication and organization.)
&gt;
&gt;I think you would be interested in researching complexity theory as well as computational
&gt;complexity theory.
&gt;
&gt;“Complexity theory is the study of complex and chaotic systems and how order, pattern,
&gt;and structure can arise from them.”
&gt;
&gt;“Computational complexity theory is a branch of the theory of computation in theoretical
&gt;computer science that focuses on classifying computational problems according to their
&gt;inherent difficulty, and relating the resulting complexity classes to each other.[1] A
&gt;computational problem is understood to be a task that is in principle amenable to being
&gt;solved by mechanical application of mathematical steps, such as an algorithm, which is
&gt;equivalent to stating that the problem may be solved by a computer.
&gt;
&gt;A problem is regarded as inherently difficult if its solution requires significant resources,
&gt;whatever the algorithm used.”
&gt;
&gt;Something I’ve derived from studying complexity theory: An interesting relationship
&gt;between objective nature and subjective organisms is that as the environment becomes
&gt;increasingly complex, so does the organism.
&gt;
&gt;Also, research the hard problem of consciousness.
&gt;
&gt;:)  
&gt;(u/[Deleted])

Assuming the length of your post I suggest it was written before I added the **UPD** to the main post. In there I put the key points of the research program (as the talk with u/sagaciux shown I scattered and buried them across the article so they are not obvious). Please see them if not already.

The two assumptions/intuitions mentioned are the reason I desided to try to solve this problem.

As were said [here](https://physics.stackexchange.com/questions/229404/intuitions-for-the-simplest-model-in-which-the-evolution-of-the-laws-of-nature-a):

&gt; Apart from various other concerns one comment: Evolution comes with an increase in complexity, whereas the physical laws evolve from (possibly) a complex unified theory at large energies etc. to arguably simpler effective theories (particles, distinct forces)

If I thought that the theory of everything would be a complex one I would never tried to find it. And so the main idea from latest **UPD** takes place:

&gt; Both these intuitions give hope that the model to build would be simple and obvious in retrospect like postulates of natural selection are simple and obvious in retrospect. So there is a hope that it's feasible task.

I might be biased with [Streetlight effect](https://en.wikipedia.org/wiki/Streetlight_effect) but it still seems attractive and promising to me to search for the answer in this simple form.</data>
      <data key="d11">6972</data>
      <data key="d12">12.317</data>
      <data key="d13">0</data>
      <data key="d14">10.9</data>
      <data key="d15">0.0911</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4cfh25">
      <data key="d6">e4celt3</data>
      <data key="d0">e4cfh25</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534529147.0</data>
      <data key="d10">Thanks. Looks like a big area to search through...

Random thought: I hope that the desired model of the natural selection would not resemble Chaitin's constant: as we can reason about it to some extent and have constraints that allow it. But we cannot have it's digits...</data>
      <data key="d11">272</data>
      <data key="d12">5.262</data>
      <data key="d13">0</data>
      <data key="d14">5.9</data>
      <data key="d15">0.4036</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4digt8">
      <data key="d6">e4digjl</data>
      <data key="d0">e4digt8</data>
      <data key="d7">WikiTextBot</data>
      <data key="d8">1</data>
      <data key="d9">1534568096.0</data>
      <data key="d10">**Gödel, Escher, Bach**

Gödel, Escher, Bach: An Eternal Golden Braid, also known as GEB, is a 1979 book by Douglas Hofstadter. 

By exploring common themes in the lives and works of logician Kurt Gödel, artist M. C. Escher, and composer Johann Sebastian Bach, the book expounds concepts fundamental to mathematics, symmetry, and intelligence. Through illustration and analysis, the book discusses how self-reference and formal rules allow systems to acquire meaning despite being made of "meaningless" elements. It also discusses what it means to communicate, how knowledge can be represented and stored, the methods and limitations of symbolic representation, and even the fundamental notion of "meaning" itself.

***

^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/compsci/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]
^Downvote ^to ^remove ^| ^v0.28</data>
      <data key="d11">1141</data>
      <data key="d12">9.83</data>
      <data key="d13">2</data>
      <data key="d14">15.5</data>
      <data key="d15">0.0397</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4e903v">
      <data key="d6">e4digjl</data>
      <data key="d0">e4e903v</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534596438.0</data>
      <data key="d10">1 ) Smartness is drastically not enough to find that answer. You need to be lucky to pick the right direction. Another necessary components are metaphysical considerations and desire for mathematical presicion.

I'm aware that from this on the task seems to tough for me...

And luck is that main factor. Do you know someone who tried to solve this task using metaphysical considerations attempted to bring some math and bet on natural selection as a mechanism that gives novelty?

If yes then I would be very glad to read what they wrote. If no then your first point is rather useless.

2) As about Hofstadter I tried to dig into his idea of strange loop. I felt like this crazy thing may be useful in that crazy task. But I wasn't able to think about it non-contradictory. May be I really should read the book :) Even if it would be just for fun in the end.</data>
      <data key="d11">859</data>
      <data key="d12">6.009</data>
      <data key="d13">0</data>
      <data key="d14">6.0</data>
      <data key="d15">0.2287</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4i9z3i">
      <data key="d6">e4i9yyk</data>
      <data key="d0">e4i9z3i</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534783221.0</data>
      <data key="d10">&gt; Apart from various other concerns one comment: Evolution comes with an increase in complexity, whereas the physical laws evolve from (possibly) a complex unified theory at large energies etc. to arguably simpler effective theories (particles, distinct forces)  
&gt; ([Bort](https://physics.stackexchange.com/users/86132/bort))</data>
      <data key="d11">326</data>
      <data key="d12">7.079</data>
      <data key="d13">0</data>
      <data key="d14">16.6</data>
      <data key="d15">0.3502</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4ia93g">
      <data key="d6">e4i9yyk</data>
      <data key="d0">e4ia93g</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534783853.0</data>
      <data key="d10">&gt; If I recall correctly, you can construct any logical outcome from a NOR and an AND operation. It then depends if you think that "it" comes from "bit". If so, there you go; if not, then you need a substrate for your logical tools to operate upon. Loop quantum gravity's spin networks, maybe.  
&gt; ([u/OliverSparrow](https://www.reddit.com/user/OliverSparrow))</data>
      <data key="d11">359</data>
      <data key="d12">5.957</data>
      <data key="d13">2</data>
      <data key="d14">8.6</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4iaahk">
      <data key="d6">e4i9yyk</data>
      <data key="d0">e4iaahk</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534783945.0</data>
      <data key="d10">&gt; So... I'm going to be blunt in expressing my opinion; you're being *way* too ambitious by trying to map this all out at such a high level before starting any actual work. You need to break this up into much smaller components, "solve" them, learn from your solutions, and try to figure out a way to combine those components into something larger.
&gt; 
&gt; If you just want to be philosophical and wax poetic about reality and write about your ideas, then that's one thing and keep doing what you enjoy. But if you want results, you need to scale back most of your expectations dramatically.  
&gt; ([u/WildZontar](https://www.reddit.com/user/WildZontar))</data>
      <data key="d11">649</data>
      <data key="d12">6.107</data>
      <data key="d13">1</data>
      <data key="d14">12.4</data>
      <data key="d15">0.2124</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4iabit">
      <data key="d6">e4i9yyk</data>
      <data key="d0">e4iabit</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534784007.0</data>
      <data key="d10">&gt; I don’t comprehend where you’re going with this. I just want to comment that your unit of natural selection should probably be more on the replicator level, not individual level.
&gt; 
&gt; Good luck!  
&gt; ([u/SirPolymorph](https://www.reddit.com/user/SirPolymorph))</data>
      <data key="d11">261</data>
      <data key="d12">5.75</data>
      <data key="d13">0</data>
      <data key="d14">14.4</data>
      <data key="d15">0.289</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4iaeaa">
      <data key="d6">e4i9yyk</data>
      <data key="d0">e4iaeaa</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534784181.0</data>
      <data key="d10">&gt; Provocative but the laws of nature are not living organisms that seek to produce offspring. They are not subject to natural selection, they are just a fixed variable of the environment.  
&gt; ([u/Vanna_man](https://www.reddit.com/user/Vanna_man))</data>
      <data key="d11">246</data>
      <data key="d12">7.107</data>
      <data key="d13">0</data>
      <data key="d14">13.1</data>
      <data key="d15">-0.0918</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e4iaqod">
      <data key="d6">e4i9yyk</data>
      <data key="d0">e4iaqod</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534784960.0</data>
      <data key="d10">About [Section 4.1](https://kiwi0fruit.github.io/ultimate-question/#s4_1):

&gt; Your constraint 4 sounds very strange, if the purpose is to mimic natural selection. As I understand your Q, the complexity of the graph is a representation of the complexity of the "organism" (am I mistaken?). At the same time, you define 'reproduction' as the duplication of vertices, which to me sounds like an bipedal organism growing a third leg, if the graph is supposed to model the "complexity" of the "organism". How is the population size represented in the proposed model?  
&gt; ([fileunderwater](http://biology.stackexchange.com/users/3624/fileunderwater))</data>
      <data key="d11">644</data>
      <data key="d12">8.864</data>
      <data key="d13">3</data>
      <data key="d14">14.7</data>
      <data key="d15">0.0474</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4m73e4">
      <data key="d6">e4i9yyk</data>
      <data key="d0">e4m73e4</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534943359.0</data>
      <data key="d10">&gt; It is very possible that the structure that create what we call laws of nature have gone through some selection. If we observe something it is probably stable. Unstable structure collapse in stable one, this is also a description of biological evolution. 'Bird can fly' can be interpreted as law of nature, emerging from the structure of a bird (or its genetic code), which is collapsed from a less stable from and it's collapsing in more stable ones. The same way chemical law emerge from the structure of atoms which is stable form of matter. You can go down the abstraction all as deep as you want. The idea of evolution of law is for me well grounded. But computational model of it trivial, in the sense that is no different from simulating biological evolution. In computation evolution and selection is reduced to it's logical form that is the same no matter the context. You can use genetic algorithm to solve puzzle, play super mario or simulate cellular evolution but the model isn't changing a lot. All you change is the fitness function and the description of the replicator.
&gt;
&gt; In conclusion, i think evolution of nature law is an interesting ontological idea but uneventful computation model wise.  
&gt; ([u/TheTorla](https://www.reddit.com/user/TheTorla))</data>
      <data key="d11">1270</data>
      <data key="d12">8.463</data>
      <data key="d13">0</data>
      <data key="d14">10.0</data>
      <data key="d15">0.117</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4b5cpc">
      <data key="d6">e4aznhr</data>
      <data key="d0">e4b5cpc</data>
      <data key="d7">sagaciux</data>
      <data key="d8">5</data>
      <data key="d9">1534475336.0</data>
      <data key="d10">Reading through section 0, I still feel there is too much ambiguity to approach the problems in section 0.1. For example, what is an individual? You postulate that natural selection begins with individuals and their environment, then later you describe natural selection as the change of the model's structure over time. I'm not entirely sure how you define structure, but I'm going to guess that it's the state of the model at a given time - a bunch of numbers, presumably. As time advances, you apply some rules and get a new state/structure. How can you identify individuals within this state/structure? Are there multiple individuals, or just one? How are individuals created/destroyed? I understand you're not sure about this either, but I think before you can even begin to answer your later questions, you need to solve the smaller problem of how to define individuals and their environment. Presumably, both are separate entities, yet they exist in a common state/structure.

I think it's impossible to answer a big general question without breaking it down into easier to manage parts. It's a bit like asking, "what is love?" There are multiple and even contradicting answers to such a question because it is too vague, and so we have to ask, what kind of assumptions can we make before answering? I may have an intuition about love which guides my answer towards a certain direction, but I can't just appeal just to intuition to generate and communicate my answer. If I want others to understand what my answer, or even my question, is, I need to precisely explain what I mean, and why I choose to make certain assumptions.

In your article, you assume for example, that a) the complexity of the universe is a result of evolution, and b) evolution is a product of natural selection, heredity, and variation. I'm not saying your assumptions are right or wrong, but you have to admit that if they are true, there must be individuals who can undergo evolution in your universe. Thus, "what is an individual?" is not merely speculative for your model - it is a mandatory question that is required for your model to work. On the other hand, if you change your assumptions and say that the state/structure as a whole can undergo "evolution" (how would you even define evolution in this case?), then you don't need a definition of individuals at all! And what if there's some mechanism other than evolution which can increase the complexity of the universe? These are some of the questions which come to my mind when reading your ideas.</data>
      <data key="d11">2539</data>
      <data key="d12">9.874</data>
      <data key="d13">3</data>
      <data key="d14">9.4</data>
      <data key="d15">0.1436</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4am7vz">
      <data key="d6">e4alo5d</data>
      <data key="d0">e4am7vz</data>
      <data key="d7">noam_compsci</data>
      <data key="d8">1</data>
      <data key="d9">1534459324.0</data>
      <data key="d10">Thanks! Looking forward to reading. </data>
      <data key="d11">36</data>
      <data key="d12">5.8</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.2463</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4asmt5">
      <data key="d6">e4alv3q</data>
      <data key="d0">e4asmt5</data>
      <data key="d7">daermonn</data>
      <data key="d8">5</data>
      <data key="d9">1534464782.0</data>
      <data key="d10">Hey! I think some of my readings in recent years are relevant to what you're trying to do. It's a really fascinating space. 


Generally, agency is a thermodynamic engine that consumes resources to produce work that's invested in the agent's future productive capabilities, with the side-effect of entropy production. From the perspective of the universe, entropy production hastens time and renders the universe a simpler computational object, so entropy-maximizing paths - including abiogenesis - are more likely to be realized. There's deep math in information theory, thermodynamics, and (quantum) physics that I don't understand well enough yet, but that's the overall picture.


Here are some links to authors/concept that might be valuable to you:

* [Causal Entropic Forces - Wisner-Freer &amp; Gross](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.110.168702): a formal model of agency roughly along the lines sketched above, where an agent produces/disperses entropy to maximize future freedom of action

* [Friston's free energy model of agency](https://en.wikipedia.org/wiki/Free_energy_principle): another formal model of agency from a neuroscientific perspective, with a focus on free energy in the system

* [Empowerment: An agent-centric model of control](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.297.8746&amp;rep=rep1&amp;type=pdf) - Klyubin et al.: another model of agency, with a focus on the throughput velocity of information through an agent's sensor-actuator circuit 

* [Jeremy England's work](http://www.englandlab.com/) on the entropic gradient that incentivizes abiogenesis


Some other folks writing in the space that I'm much less familiar with:

* Ilya Prigogine, of course, who won the Nobel for his work on the nature of time, irreversibility in thermodynamic systems, far-from-equilibrium dynamics, and dissipative structures

* Alfred Lotka, a 20thC physicist who wrote extensively on the relationship between evolution and physics

* [Rod Swenson](http://philosophyofscience.org/), who is apparently regarded as a bit of a crackpot, but whose ideas seem very interesting

* Chaisson's [Energy Rate Density as a Complexity Metric &amp; Evolutionary Driver](http://www.paulchefurka.ca/Thermo%20Reading%20List/Chaisson%202010%3B%20Energy%20Rate%20Density%20as%20a%20Measure%20of%20Complexity.pdf) is another work in this space I'm not terribly familiar with

* Philosophers like Bataille, Deleuze &amp; Guattari, contemporary accelerationists, etc have interesting ideas around this from the perspective of continental philosophy, which is just as hard to parse as the math but along a different dimension


Check out also, e.g., the [quantum source of spacetime](http://www.nature.com/news/the-quantum-source-of-space-time-1.18797), which casts space as quantum entanglement networks and time as the breaking of entanglement, which is apparently a big improvement in the complexity of the math we use to represent spacetime, and which provides a path forward for quantum gravity as the density of entanglements. This is important because entropy is in some sense a measure of entanglement or causal relationships; think about entropy as information-theoretic uncertainty within a causal model of epistemology for an intuition pump here.


It sounds like you're less interested in, e.g., specific models of agency,


At the end of the day, I don't really know. I wish I could be more helpful. Most generally, there's some super-deep, super-important underlying unity between thermodynamics, information theory, physics and cosmology, evolutionary processes, machine learning and optimization, linear algebra and topology, markets and efficiency, etc etc etc, but I don't have the mathematical maturity of conceptual clarity to really explicate it. 


Godspeed, let me know what you find!</data>
      <data key="d11">3826</data>
      <data key="d12">10.931</data>
      <data key="d13">0</data>
      <data key="d14">16.0</data>
      <data key="d15">0.2442</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4amfzv">
      <data key="d6">e4alv3q</data>
      <data key="d0">e4amfzv</data>
      <data key="d7">Anonymous</data>
      <data key="d8">2</data>
      <data key="d9">1534459517.0</data>
      <data key="d10">[deleted]</data>
      <data key="d11">9</data>
      <data key="d17">7</data>
      <data key="d13">0</data>
      <data key="d14">8.4</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4ccl9v">
      <data key="d6">e4ccl57</data>
      <data key="d0">e4ccl9v</data>
      <data key="d7">WikiTextBot</data>
      <data key="d8">1</data>
      <data key="d9">1534523002.0</data>
      <data key="d10">**Streetlight effect**

The streetlight effect is a type of observational bias that occurs when people only search for something where it is easiest to look.It is also called a drunkard's search, after the joke about a drunkard who is searching for something he has lost:



A policeman sees a drunk man searching for something under a streetlight and asks what the drunk has lost. He says he lost his keys and they both look under the streetlight together. After a few minutes the policeman asks if he is sure he lost them here, and the drunk replies, no, and that he lost them in the park. The policeman asks why he is searching here, and the drunk replies, "this is where the light is".The anecdote goes back at least to the 1920s,

and has been used metaphorically in the social sciences since at least 1964, when Abraham Kaplan referred to it as "the principle of the drunkard's search".

***

^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/compsci/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]
^Downvote ^to ^remove ^| ^v0.28</data>
      <data key="d11">1319</data>
      <data key="d12">10.353</data>
      <data key="d13">2</data>
      <data key="d14">11.1</data>
      <data key="d15">-0.1545</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e4cdzfr">
      <data key="d6">e4ccl57</data>
      <data key="d0">e4cdzfr</data>
      <data key="d7">Anonymous</data>
      <data key="d8">1</data>
      <data key="d9">1534526005.0</data>
      <data key="d10">[deleted]</data>
      <data key="d11">9</data>
      <data key="d17">7</data>
      <data key="d13">0</data>
      <data key="d14">8.4</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4cj3d5">
      <data key="d6">e4cfh25</data>
      <data key="d0">e4cj3d5</data>
      <data key="d7">Meguli</data>
      <data key="d8">1</data>
      <data key="d9">1534535389.0</data>
      <data key="d10">I am not well-versed in this area but a model that strong may not be within the boundaries of halting problem. As I said, I am not that experienced and have no clue whether you can escape limitations of Chaitin's constant. Still, I think that's a good starting point for theoretical analysis.

In a lecture, I saw Chaitin's dislike for dynamical models approach to this problem and he was criticizing Turing for dabbling in PDEs for such problems. But that kind of numeric optimization might be your only bet. </data>
      <data key="d11">510</data>
      <data key="d12">6.149</data>
      <data key="d13">0</data>
      <data key="d14">9.1</data>
      <data key="d15">0.0184</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4fap4m">
      <data key="d6">e4e903v</data>
      <data key="d0">e4fap4m</data>
      <data key="d7">sagaciux</data>
      <data key="d8">2</data>
      <data key="d9">1534649092.0</data>
      <data key="d10">I would suggest that smartness is more important than luck, because there are too many possibilities to stumble upon one by accident. One of Godel, Escher, Bach's arguments is how a self-referencing "strange loop" can be constructed from Godel's incompleteness theorem. What's interesting to me is how specific this construction is, and how long it takes. It's not an argument you could stumble upon, rather, it's something that was carefully thought out and constructed, piece by piece.

The fact that nobody has previously answered your question should be a sign that it is a very hard question. You may not know of anyone who has tried to bring math and natural selection into solving this problem, but if there are thousands of smart people who have thought about it, what are the chances nobody has tried this combination? I mean, I've thought about it in the past as well, which is why I'm interested in engaging you. As for metaphysical ideas, without knowing a solution, how do you know your metaphysical intuitions are leading in the right direction?</data>
      <data key="d11">1059</data>
      <data key="d12">6.976</data>
      <data key="d13">1</data>
      <data key="d14">10.8</data>
      <data key="d15">0.2419</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4ia06e">
      <data key="d6">e4i9z3i</data>
      <data key="d0">e4ia06e</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534783292.0</data>
      <data key="d10">Yes, you got the main difference right. Apart from that, effective theories describe a smaller part of the reality than the unified theories. So there is no surprise that they are simpler. The assumption of the simpler state in the past and evolution that creates complexity is the attempt to answer the "Why these laws question". I cannot forsee any other ways of answering it.

And also this question fits well with Lee Smolin assumption of cosmological natural selection.

Thank you for the comment. It's a good question about the viability of the research problem.</data>
      <data key="d11">568</data>
      <data key="d12">6.389</data>
      <data key="d13">1</data>
      <data key="d14">6.8</data>
      <data key="d15">0.2803</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4iaarn">
      <data key="d6">e4iaahk</data>
      <data key="d0">e4iaarn</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534783962.0</data>
      <data key="d10">The name of the article is not mentioned here but it's "The Ultimate Question of Life, the Universe, and Everything". And there is a reason for it. Well enough justified (from philosophical point of view) model of open ended evolution would be a very good candidate to answer The Question. And I have no hope that such a question can be solved by splitting to smaller parts. I also can tell that all that I know about this problem suggests that it cannot be split to smaller components. But it's only my intuition so it's not an argument...

But you've got the point that breaking into smaller components can be useful - it would provide intuitions and habits of how to deal with that small parts. With these intuitions and habits the task would be easier. But this aside: I do not see how this can be slit up. Not a single idea. As I said [**here**](https://www.reddit.com/r/compsci/comments/97s8dl/on_natural_selection_of_the_laws_of_nature/e4c4ghi) the hardest part is to formulate what are the individuals in the model and how they work (they are weakly constrained by expectations of open-endedness and some occam's-razor-like metaphysics). How to split that?</data>
      <data key="d11">1164</data>
      <data key="d12">8.077</data>
      <data key="d13">1</data>
      <data key="d14">7.8</data>
      <data key="d15">0.1557</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4iaefr">
      <data key="d6">e4iaeaa</data>
      <data key="d0">e4iaefr</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534784191.0</data>
      <data key="d10">For this I assume that the fixed laws of nature can be the properties of the universe that may be one of the individuals-universes from Lee Smolin's [Cosmological natural selection](https://en.wikipedia.org/wiki/Lee_Smolin#Cosmological_natural_selection).

It's unknown why laws of nature are this way not the other. I cannot come with idea better than the proposed research task described in the main post.</data>
      <data key="d11">407</data>
      <data key="d12">7.773</data>
      <data key="d13">0</data>
      <data key="d14">12.0</data>
      <data key="d15">0.2004</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4iarpt">
      <data key="d6">e4iaqod</data>
      <data key="d0">e4iarpt</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534785025.0</data>
      <data key="d10">Presumably, there are many "layers" on which populations exist. The vertices themself are
the atomic individuals that are characterised by their edges. All the vertices are the basic population. But the goal of the model is to get the individuals at higher levels: as patterns in the graph (there may be even cycles of patterns changing to each other, like wave). The interesting individuals are patterns (subgraphs that persist in the changing graph during time). And there expected layers on layers.</data>
      <data key="d11">501</data>
      <data key="d12">7.66</data>
      <data key="d13">1</data>
      <data key="d14">8.6</data>
      <data key="d15">0.1272</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4c2lom">
      <data key="d6">e4b5cpc</data>
      <data key="d0">e4c2lom</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534506986.0</data>
      <data key="d10">&gt; And what if there's some mechanism other than evolution which can increase the complexity of the universe?

I would be curious to learn about such mechanism. I guess there can be imagined some. But I guess they would fall somewhere between natural selection postulates (plus something yet unknown that would allow to precisely define what is an individual) and between sentient god that created the universe this morning with me unshaven.

The more complex structures we introduce as axioms to generate open ended dynamic universe the more we would feel the need to answer "Why these particular structures?" question.

By the way, if we ever to create the general artificial intelligence then it could be possible to make an assumption that the Universe started with a such an AI precisely defined (plus something to drive process).

But still I feel like starting with something as simple as possible is much preferable.</data>
      <data key="d11">923</data>
      <data key="d12">7.52</data>
      <data key="d13">1</data>
      <data key="d14">10.5</data>
      <data key="d15">0.3963</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4c4ghi">
      <data key="d6">e4b5cpc</data>
      <data key="d0">e4c4ghi</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534509287.0</data>
      <data key="d10">&gt; but I think before you can even begin to answer your later questions, you need to solve the smaller problem of how to define individuals and their environment

I guess I failed to say it properly. And it's a good point to note **but** the all metaphysical considerations, all guesses and other questions are there for only one purpose: to help find out what should be the individuals (environment should be other individuals presumably - again from simplicity considerations) so that their dynamic would lead to natural selection with open ended evolution that does not stop on fixed level of complexity.

I/we should answer this only question and then make a research if open ended evolution is the case in a formulated model (how to do it is another question).

So again. The most of the assumptions I made are for philosophical self-justification that take form of choosing the simplest structures. I guess I choose them also because it's easier to work with them :)

</data>
      <data key="d11">973</data>
      <data key="d12">7.259</data>
      <data key="d13">0</data>
      <data key="d14">16.0</data>
      <data key="d15">0.052</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4ca5zp">
      <data key="d6">e4b5cpc</data>
      <data key="d0">e4ca5zp</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534518135.0</data>
      <data key="d10">The whole article is a description of the research program aimed to create an atrificial universe in which we can answer any questions like "why is the present is this way not another?" (it's a better formulated ancient question "Why is there something rather than nothing?"). And this universe formulation should be enough simple and self-justifying to be a candidate for model of the our real universe.

And there are two main intuitions-constraints for this universe: 1) the start from the simple enough state (the beggining of time), 2) the complexity capable of producing sentient beings (after enormous simulation time of cource) comes from natural selection. And natural selection postulates hold in the universe formulation.

Both these intuitions give hope that the model to build would be simple and obvious in retrospect like postulates of natural selection are simple and obvious in **retrospect**. So there is a hope that it's feasible task.

The "only" thing is left is to precisely define what are individuals and environment in the model (environment should be other individuals presumably - again from simplicity considerations) and how the process of their replication and death takes place. At the moment I'm not even sure if the individuals should be bult-in or to be emergent... (but I lean to the first option).

And sadly I have not moved far to this goal. I'm still in the situation of "I feel like the answer the this grand question can be obtained this particular way".</data>
      <data key="d11">1495</data>
      <data key="d12">8.746</data>
      <data key="d13">4</data>
      <data key="d14">11.2</data>
      <data key="d15">0.1893</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4aw6ql">
      <data key="d6">e4asmt5</data>
      <data key="d0">e4aw6ql</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534467717.0</data>
      <data key="d10">Oh my macaroni! That would be a hard read through (when I get free time and motivation). Thanks a lot as it seems like there can be something very useful.

If not my metaphysical hopes I would have dropped this task long ago. And hopes are about that the desired model should be simple enough to imagine and create (even for me): start from the simplest state of finite and discrete space (presumably that consist of atomic agents that can influence/change each other), laws that govern change of the space are immanent to agents and not much more complex than natural selection postulates, and etc.</data>
      <data key="d11">599</data>
      <data key="d12">5.866</data>
      <data key="d13">0</data>
      <data key="d14">7.9</data>
      <data key="d15">0.3535</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4ceuyo">
      <data key="d6">e4cdzfr</data>
      <data key="d0">e4ceuyo</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534527865.0</data>
      <data key="d10">&gt;Yeah I wrote that before you updated the post. Now I see that you’re really looking
&gt;for a simple theory of everything and I understand what you mean. I briefly read your
&gt;article and I can see you’ve spent a lot of time and effort into the question you
&gt;originally asked. Sorry for trying to put words in your mouth.
&gt;
&gt;You’re trying to come up with a theory of how laws of physics evolve. Is this correct?  
&gt;(u/[Deleted])

I hope that something that resemble the laws of physics emerge in the model. But that not the thing I'd like concentrate on. I'm more interested in seeing the emerging populations of individuals that are stable and have enough coherent behavior (like individuals in a pulation quiet alike in comparison with other species). And then seeing that populations change in time and become more and more complex.

As about laws of physics: they may be a properties of a particular individual universe if we are to remember the cosmological natural selection by Lee Smolin. (if we are under mentioned research assumptions of simplicity).

So the task is much more about special case of artificial life and open-ended evolution than about physical laws. But the desired model can still be a good candidate for a theory of everything. But it might (or would) be very hard to test it.

It also may be that there is a way that position invariant  laws on physics (that hold across the universe) can emerge from natural selection. It's an interesting way of research but I haven't thought of it much...</data>
      <data key="d11">1516</data>
      <data key="d12">7.694</data>
      <data key="d13">0</data>
      <data key="d14">8.2</data>
      <data key="d15">0.2178</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4ghpsu">
      <data key="d6">e4fap4m</data>
      <data key="d0">e4ghpsu</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534707907.0</data>
      <data key="d10">That's definitely a hard problem. But I hope it has a non-complex non-obvious solution (see the **UPD** to he main post). All I did actually for solving the problem is that I came up with some intuitions in what direction the solution can be obtained. These intuitions might lead in the wrong direction. I'm aware of it. But taking into account metaphysical considerations about simplicity and justified complexity (that root to the "the world was created this morning with me unshaven"-like considerations) I can image only two solutions to the problem:

1. Minimal open-ended model with natural selection that has the beginning of time
2. Model with general artificial intelligence at the beginning of time (aka The God)

As we all know the natural selection is capable of producing sentient beings so it's simpler from Occam's razor to go with the first option not the second.

P.S.

The beginning of time metaphysically justified by anti-"intinite elephants"-like considerations.


</data>
      <data key="d11">986</data>
      <data key="d12">7.153</data>
      <data key="d13">2</data>
      <data key="d14">11.3</data>
      <data key="d15">0.2302</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4iase3">
      <data key="d6">e4iarpt</data>
      <data key="d0">e4iase3</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534785064.0</data>
      <data key="d10">&gt; To me, it is still unclear how individuals, individual traits and the population is represented in your model. It would probably be useful if you clearly defined how 'individual', 'individual properties' (which represent individual "complexity") and 'population' are represented in the model directly in your question, e.g. vertex = xxx, graph =yyy, edge = zzz.  
&gt; ([fileunderwater](http://biology.stackexchange.com/users/3624/fileunderwater))</data>
      <data key="d11">446</data>
      <data key="d12">8.279</data>
      <data key="d13">1</data>
      <data key="d14">19.8</data>
      <data key="d15">0.2154</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4fb4fx">
      <data key="d6">e4c2lom</data>
      <data key="d0">e4fb4fx</data>
      <data key="d7">sagaciux</data>
      <data key="d8">2</data>
      <data key="d9">1534649528.0</data>
      <data key="d10">Here's a trivial example of a system that "increases the complexity of the universe". Suppose I define a universe in which there exists only a mathematical machine that outputs the digits of pi. Over time, the universe fills up with the machine's output - successive digits of pi. This universe is getting more complex over time, because pi never repeats. But this is obviously not an interesting universe, let alone a model of our universe. It does not have self-conscious individuals, for example.

My point is, there are plenty of possible universes (infinite, even) that get more complex over time. You are going to need a more precise definition of the complexity that you are looking for. A general artificial intelligence is a good candidate for generating "comlexity" because it is self-referential and self-modifying - except this is a very hard problem that hasn't been solved yet. If such an AI is the foundation of the solution to your problem, that suggests your problem is even harder than the problem of general AI.</data>
      <data key="d11">1030</data>
      <data key="d12">8.078</data>
      <data key="d13">2</data>
      <data key="d14">10.0</data>
      <data key="d15">-0.0825</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e4fc3ou">
      <data key="d6">e4ca5zp</data>
      <data key="d0">e4fc3ou</data>
      <data key="d7">sagaciux</data>
      <data key="d8">2</data>
      <data key="d9">1534650540.0</data>
      <data key="d10">I feel the entire problem still comes down to defining your individuals and their environment. For example, is there physical distance in your model? What are your individuals trying to maximize (what is their goal)? Natural selection presumably means some of these individuals will die or otherwise fail to reproduce. What are the fitness criterion that govern this? How do your individuals decide what to do? Are they governed by a computer code? What actions does this code allow? If there is reproduction and variation, these codes would have to be combined in a way that doesn't break their functionality.

I imagine there are countless ways to define a model, most of which don't result in "complexity". If someone magically gave you a "solved" model that does what you want, it would be trivial to prove or disprove each of your intuitions and assumptions by comparing it with the solved model. But finding that model *is* the problem. As they say, the devil is in the details.

When I find myself stuck on a problem, it's usually a sign I need to take a break, rethink my goals, and learn about different approaches. Similarly, if I am having trouble communicating my ideas to someone, it is usually because I don't understand it clearly myself.</data>
      <data key="d11">1253</data>
      <data key="d12">7.791</data>
      <data key="d13">2</data>
      <data key="d14">7.7</data>
      <data key="d15">-0.169</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e4b5zpd">
      <data key="d6">e4aw6ql</data>
      <data key="d0">e4b5zpd</data>
      <data key="d7">daermonn</data>
      <data key="d8">1</data>
      <data key="d9">1534475885.0</data>
      <data key="d10">Haha yeah, it's a lot, I sympathize as I never do the readings I should.


And yeah, sounds like you will be most interested in the underlying thermodynamics/information theory/statistical mechanics.</data>
      <data key="d11">199</data>
      <data key="d12">5.75</data>
      <data key="d13">0</data>
      <data key="d14">12.7</data>
      <data key="d15">0.7041</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4iaspq">
      <data key="d6">e4iase3</data>
      <data key="d0">e4iaspq</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534785086.0</data>
      <data key="d10">Current assumption: vertexes=individuals, edges=individual traits and the graph=population. But this is only at the "basic level". Patterns are also individuals but on the "next level".</data>
      <data key="d11">185</data>
      <data key="d17">6</data>
      <data key="d13">2</data>
      <data key="d14">12.4</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e4gjz6s">
      <data key="d6">e4fc3ou</data>
      <data key="d0">e4gjz6s</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534711836.0</data>
      <data key="d10">It seems to me that I at least managed to communicate the problem :)

Yep, the devil is in details. Even using all metaphysical assumptions I've got it still isn't enough to figure out what would individuals look like. And randomly create models and test them is not an option. I still lack some pieces for the puzzle (assuming it's the right puzzle and it exists).

As about some of your questions:

* I would start from something like enchanced grapf like structure. So the distance is an emergent property. And the basic entity that form space is a link that means the possibility of action-impact
* Individuals don't have a goal but they have free-will that is simply a random choice from available actions-impacts to their neighbors (or to themselves even)
* I think that there should not be environment only individuals that are environment to each other. And the finness criteria comes from the Red Queen hypothesis.
* The most tricky part is that the individuals should somehow contain an algorithm that defines impacts on the neighborhood. So that algorithm changes neighbors' algorithms. Or even the algorithm changes itself also.
* **UPD** Or maybe there still should be some medium in which the algorithms with individuals emerge... 


By the way, I'm on a break from this problem since summer 2016. And I still hold frustration for it...
</data>
      <data key="d11">1351</data>
      <data key="d12">7.549</data>
      <data key="d13">0</data>
      <data key="d14">8.3</data>
      <data key="d15">-0.075</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e4hokg0">
      <data key="d6">e4gjz6s</data>
      <data key="d0">e4hokg0</data>
      <data key="d7">sagaciux</data>
      <data key="d8">2</data>
      <data key="d9">1534753819.0</data>
      <data key="d10">Perhaps you could start by building a simple model that demonstrates limited evolution. For example, you might include:

- __Individuals__ containing __algorithm(s)__ and __properties__
- A __genotype__ or __algorithm__ containing a __code__ governs how individuals behave, which also defines a __population__ of individuals sharing the same genotype/algorithm
- The universe's __rules__, which dictate how individuals are added, removed, or otherwise altered
- The universe's structure: some kind of graph or grid on which individuals have a location

A very simple model that contains some of these elements is John Conway's "Game of Life". There are individuals (cells) that live on a grid (a kind of graph), and they have one property: whether they are alive or dead. The universe's rules are: for every timestep, depending on the number of adjacent live cells, a cell either remains dead, becomes alive, stays alive, or becomes dead. This model exhibits very complex behavior with the right starting conditions - in fact, it has been demonstrated to be Turing complete. 

However, this model is missing the genotype or algorithm governing each individual's behavior, and thus lacks natural selection. Here's a way you might extend this model. First, each individual needs some properties that can be manipulated. For example, each cell might have a property - a number - called "energy". Second, each cell needs an algorithm and actions it can choose. For example, this algorithm might be written in a code which executes one instruction per timestep, looping back to the beginning when completed. The instructions might be WAIT, which does nothing, and GROW, which spends energy to bring a (random) adjacent cell to life. Finally, the universe's rules need to have interesting tradeoffs, so that it's not too easy or too hard for individuals to survive. For example, each cell might lose a certain amount of energy per timestep to stay alive. Each cell might also receive a certain amount of energy per timestep which depends on the number of adjacent live and dead cells. By tweaking these rules, you could make a universe in which cells have to spend energy strategically to stay alive.

Even though the model I've outlined so far lacks evolution, you can already demonstrate some interesting things. For example, you could generate random genotypes, put an initial population of that genotype in an empty universe, and see which genotypes produce the most individuals or the highest energy individuals after a certain number of timesteps. You could pit different genotypes against each other by populating them in the same universe. You could repeat these experiments on universes with varying rules, and see how those rules affect the resulting complexity of the model.

The Red Queen hypothesis isn't a fitness criterion - it simply states that individuals can become more complex by competing against each other. You need to actually define a way to measure the fitness of an individual. For example, individuals might compete by growth, in which case you are looking for a population that outnumbers the rest. To express this fitness criterion, your universe might have a rule which kills x individuals every n timesteps. Or, individuals might compete by amassing the most energy. To express this, you might have a rule killing off individuals with less than y energy.

The final missing piece for evolution is reproduction. You need rules for how genotypes can be altered within the universe. The simplest would be asexual variation - when a new cell is born, simply randomize the code that is copied. Sexual reproduction would require more complex rules for how genotypes are passed from cell to cell.

A few notes on the genotype/algorithm: first, in my outline I said each instruction takes one timestep to complete. I chose this because it gives instructions a cost, namely time, which makes shorter, simpler genomes more competitive against longer genomes. Second, if you want complex behavior to emerge out of your genomes, you'll probably want the code to be Turing complete, which means it must include branching and recursion. I haven't really thought about what code would be minimally Turing complete, but as a quick sketch, you could expand the code above to include:

- Branching: IF{a certain neighbor cell is alive/dead}, do {one action}, else do {another action}
- Recursion: GO_BACK{a certain number of instructions}

All of this would be quite interesting to build, but of course doesn't guarantee that the resulting universes would be worth studying. For example, I suspect many universes would end up in a fixed or repeating state. On the other hand, you might build a universe that gets more complex for a while, but then simply stops. In fact, even the universe we live in might have a finite limit on complexity! It is simply impossible to know - unless you can run your model for an infinite amount of time, which is also impossible (see the halting problem). As for building a universe that ends up like ours, well, personally I'm not very optimistic. Either this perfect model of our universe would have the same rules as ours, in which case we can just look at our real universe to discover them, or the model has (drastically) different rules, in which case it would be a very interesting philosophical object, but of what relevance to our universe? I can only say to you, good luck.</data>
      <data key="d11">5425</data>
      <data key="d12">11.827</data>
      <data key="d13">2</data>
      <data key="d14">11.6</data>
      <data key="d15">0.081</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4itpf7">
      <data key="d6">e4hokg0</data>
      <data key="d0">e4itpf7</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534809331.0</data>
      <data key="d10">As I always say the great role in my assumptions play intuitions of simplicity resembling Occam's razor.

And I also try to apply it to the question "What should the individual be?". And in case we try to define individuals in some particular way the question "Why individuals are this way not the other?". Answering these questions is important for justifying creation of a toy-model of universe (so that it's a universe that has The Beginning of Time not just a model that has a it's cause of existence in the form of people).

And the answer to this question should be satisfactory (that's what I called 'self-justifying' later).

For example if we build a model and define the individuals the first question is "how many individuals should we set?". From simplicity assumptions it should be one or two. Others would appear via reproduction mechanism. One is preferable but the final choice depends on dynamics we can get from one or two that depends on other properties of the model (that are yet to be defined). And if start from single individual then the next time step presumably should have two individuals. And that may give some hints about the **rules** to define.

Another possible way of justifying the individuals design is "gauging away" as Lee Smolin called it. It's like specifying [equivalence class](https://en.wikipedia.org/wiki/Equivalence_class) on a set (so the "real" structure is the structure of the equivalence class not the particular implementation) or like [Electric potential](https://en.wikipedia.org/wiki/Electric_potential) that is defined up to a constant (so the class of solutions that differ on a constant is effectively the same tool). Random thought about the model to build: different ways of defining algorithms (that are like DNA for the individuals) may be the particular implementations and the real thing is the model after "gauging away".

But I feel like going the way of "gauging away" is too tough for me... I'm not good at creating complex things aver and over again. If go this way there should be created many flawed models that would lead to my disappointment and eventually decrease motivation to zero :) So would like to leverage metaphysical considerations as much as possible.

I hope that the justification via simplicity considerations not only the extra burden to keep in mind but also a help. Because if metaphysical simplicity considerations are right hypothesis about the beginning of time then we should build a model using these considerations. But it they are wrong then I give up to build a model that may be of any complexity (and Universe itself then should be unknowable or unexplainable - with this I also give up).

&gt; I mean, I've thought about it in the past as well, which is why I'm interested in engaging you.

By the way, did you use some philosophical or common-sense considerations when you thought about? If yes then what considerations it were?

&gt; You need to actually define a way to measure the fitness of an individual.

But why? Fitness criteria as it's in bioliogy is a tool for studying the process of natural selection. It's not an objective thing that exist.

Or you simply mean the answer to the question "what death means in the model?" (and how it works). That's a good question. At the moment I cannot choose from simplicity considerations if there should be explicit death criteria in the model or it should be emerging property (like if the "genotype" is absent in the simulation at particular time then the genotype is extinct).

&gt; **algorithm(s)** and **properties**

From simplicity considerations it is desirable the algorithms actually also be the properties. That is, the properties of individuals is how they affect and change other individuals (that is should be encoded in the algorithm). But that's a hard idea to think of. When thinking about it sometimes strange loop come to mind. Sometimes that the atoms of the universe should be something more simple than individuals and the individuals emerge from these atoms...

&gt; In fact, even the universe we live in might have a finite limit on complexity!

I think that our universe is capable of containing general intelligence (artificial or not). I think the ability to reach this is good constraint, but a vague one :)

&gt; As for building a universe that ends up like ours

As stated by other commenters:

&gt; the laws of nature are not living organisms that seek to produce offspring. They are not subject to natural selection, they are just a fixed variable of the environment.

And we observe them this way. For this I assume that the fixed laws of nature can be the properties of the universe that may be one of the individuals-universes from Lee Smolin's [Cosmological natural selection](https://en.wikipedia.org/wiki/Lee_Smolin#Cosmological_natural_selection).

It's unknown why laws of nature are this way not the other. I cannot come with idea better than the proposed research task described in the main post.

&gt; but of what relevance to our universe?

My only hope for relevance to our universe is that we can judge about possible properties of the possible universes and even about their probabilities.
</data>
      <data key="d11">5169</data>
      <data key="d12">12.311</data>
      <data key="d13">9</data>
      <data key="d14">10.3</data>
      <data key="d15">0.1626</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e4j23r1">
      <data key="d6">e4itpf7</data>
      <data key="d0">e4j23r1</data>
      <data key="d7">sagaciux</data>
      <data key="d8">2</data>
      <data key="d9">1534816503.0</data>
      <data key="d10">I don't think you can avoid philosophical or common-sense ideas if you are trying to design a universe from nothing. In my outline of "Game of Life" there are already assumptions about the existence of individuals, a grid that defines neighbors, the existence of time stepping forward... every assumption is some kind of philosophical or common-sense idea humans have about the universe. What's the point of arguing about the right assumptions, when the proof is in the model? As an analogy, you don't show that humans can fly by having a philosophical debate, you show it by building an airplane. Besides, assumptions can be wrong. Common sense says the sun goes around the Earth, but astronomy shows it makes more sense for the Earth to go around the sun.

When you are designing a model universe, things like fitness criteria and the laws of nature no longer have any intrinsic meaning, except as you define them. For example: in the real universe, death is a name we have for some chemical reactions stopping and others starting. But in a model you can explicitly define death - give it a numerical property and specific conditions which cause it. Or you can choose to leave it out. You keep talking about removing things and getting to the simplest or most minimal model - but even the smallest model has to define *something*. So the choice of what to define is the problem.

I'm not sure what else I can say to help you. I've described the way I would build a model and explore what is possible. Either you can start building models to verify your ideas, or you can keep speculating forever.</data>
      <data key="d11">1598</data>
      <data key="d12">7.92</data>
      <data key="d13">1</data>
      <data key="d14">7.7</data>
      <data key="d15">-0.1618</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e4jtusi">
      <data key="d6">e4j23r1</data>
      <data key="d0">e4jtusi</data>
      <data key="d7">kiwi0fruit</data>
      <data key="d8">1</data>
      <data key="d9">1534848984.0</data>
      <data key="d10">Thank you for thoughtful and useful conversation! Yep, both speculations and model are stuck at the moment. So the better option is to start again doing not waiting for a miracle or a savior.</data>
      <data key="d11">191</data>
      <data key="d12">5.133</data>
      <data key="d13">0</data>
      <data key="d14">6.5</data>
      <data key="d15">0.2953</data>
      <data key="d16">Positive</data>
    </node>
    <node id="9gulx5">
      <data key="d0">9gulx5</data>
      <data key="d1">Discrete math, first order logic help</data>
      <data key="d2">0</data>
      <data key="d3">0.69</data>
      <data key="d4">6</data>
      <data key="d5">0</data>
    </node>
    <node id="e66wtyi">
      <data key="d6">9gulx5</data>
      <data key="d0">e66wtyi</data>
      <data key="d7">jx4713</data>
      <data key="d8">4</data>
      <data key="d9">1537305904.0</data>
      <data key="d10">(loves(john, mary)) AND (∃!x : (x != john AND loves(x, mary)))

&amp;#x200B;

Note that there is an order of precedence on these relations and quantifiers but I am being purposefully scrupulous in order for you to see exactly how the sentence corresponds.</data>
      <data key="d11">251</data>
      <data key="d12">5.111</data>
      <data key="d13">0</data>
      <data key="d14">8.7</data>
      <data key="d15">0.0577</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e67b2uf" />
    <node id="e67c4do" />
    <node id="e66ybxa" />
    <node id="e66wtuv">
      <data key="d6">9gulx5</data>
      <data key="d0">e66wtuv</data>
      <data key="d7">UnconstitutionalSir</data>
      <data key="d8">-1</data>
      <data key="d9">1537305901.0</data>
      <data key="d10">Also note: the first symbol means (for all values of ''), the second (there exists (ie there is at least one '')), and I believe the last one means (there does not exist (ie there isn't a single one of '')).</data>
      <data key="d11">207</data>
      <data key="d12">5.25</data>
      <data key="d13">0</data>
      <data key="d14">14.6</data>
      <data key="d15">0.4019</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66wf3r">
      <data key="d6">9gulx5</data>
      <data key="d0">e66wf3r</data>
      <data key="d7">UnconstitutionalSir</data>
      <data key="d8">-5</data>
      <data key="d9">1537305477.0</data>
      <data key="d10">For all John's there exists Mary. AND for all but John, there does not exist Mary.

I think that's the translation. Replace it with symbols and you should be fine.

Important: this is a mental exercise to get you use to logic notation. It is important to do yourself. I suggest doing at least another 3 in place of this so you can get used to it.</data>
      <data key="d11">346</data>
      <data key="d12">4.981</data>
      <data key="d13">0</data>
      <data key="d14">3.5</data>
      <data key="d15">0.0867</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e673ixg">
      <data key="d6">e66wtyi</data>
      <data key="d0">e673ixg</data>
      <data key="d7">TomvdZ</data>
      <data key="d8">6</data>
      <data key="d9">1537312119.0</data>
      <data key="d10">`∃!x` means "there exists precisely one `x` s.t.". It does *not* mean "doesn't exist".

https://en.wikipedia.org/wiki/Uniqueness_quantification</data>
      <data key="d11">143</data>
      <data key="d12">7.062</data>
      <data key="d13">2</data>
      <data key="d14">9.8</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e67cftw">
      <data key="d6">e66wtuv</data>
      <data key="d0">e67cftw</data>
      <data key="d7">Crysis456</data>
      <data key="d8">1</data>
      <data key="d9">1537319482.0</data>
      <data key="d10">The third one means "there exists a unique" as in there is exactly one.</data>
      <data key="d11">71</data>
      <data key="d12">4.583</data>
      <data key="d13">1</data>
      <data key="d14">4.0</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66y7gl">
      <data key="d6">e66wf3r</data>
      <data key="d0">e66y7gl</data>
      <data key="d7">PM_ME_IRL</data>
      <data key="d8">6</data>
      <data key="d9">1537307281.0</data>
      <data key="d10">&gt;For all johns there exists Mary

Why use a universal quantifier if there is only one John?</data>
      <data key="d11">91</data>
      <data key="d12">4.5</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e673o6m">
      <data key="d6">e673ixg</data>
      <data key="d0">e673o6m</data>
      <data key="d7">jx4713</data>
      <data key="d8">2</data>
      <data key="d9">1537312244.0</data>
      <data key="d10">Apologies, half asleep. Then, I suppose: (loves(john, mary)) AND (∃!x : loves(x, mary)).</data>
      <data key="d11">88</data>
      <data key="d12">4.917</data>
      <data key="d13">0</data>
      <data key="d14">1.3</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66yq6c">
      <data key="d6">e66y7gl</data>
      <data key="d0">e66yq6c</data>
      <data key="d7">UnconstitutionalSir</data>
      <data key="d8">-3</data>
      <data key="d9">1537307780.0</data>
      <data key="d10">We don't know if it's one.</data>
      <data key="d11">26</data>
      <data key="d12">3.333</data>
      <data key="d13">0</data>
      <data key="d14">-1.5</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e66zb12">
      <data key="d6">e66yq6c</data>
      <data key="d0">e66zb12</data>
      <data key="d7">PM_ME_IRL</data>
      <data key="d8">6</data>
      <data key="d9">1537308330.0</data>
      <data key="d10">We do? It says "John loves Mary".</data>
      <data key="d11">33</data>
      <data key="d12">3.286</data>
      <data key="d13">1</data>
      <data key="d14">-1.2</data>
      <data key="d15">0.2859</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66zoed">
      <data key="d6">e66zb12</data>
      <data key="d0">e66zoed</data>
      <data key="d7">UnconstitutionalSir</data>
      <data key="d8">-4</data>
      <data key="d9">1537308677.0</data>
      <data key="d10">John could be anything. John could any integer/real number. John could be a set of all people named John. So I am saying 'for anyone that equates to a john' they love Mary.</data>
      <data key="d11">172</data>
      <data key="d12">4.926</data>
      <data key="d13">0</data>
      <data key="d14">1.8</data>
      <data key="d15">0.1785</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e66zzki">
      <data key="d6">e66zoed</data>
      <data key="d0">e66zzki</data>
      <data key="d7">PM_ME_IRL</data>
      <data key="d8">4</data>
      <data key="d9">1537308966.0</data>
      <data key="d10">John is a single human being that loves Mary. You're going way too far.</data>
      <data key="d11">71</data>
      <data key="d17">4</data>
      <data key="d13">0</data>
      <data key="d14">2.5</data>
      <data key="d15">0.2859</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e6727yp">
      <data key="d6">e66zoed</data>
      <data key="d0">e6727yp</data>
      <data key="d7">jx4713</data>
      <data key="d8">1</data>
      <data key="d9">1537310972.0</data>
      <data key="d10">This is not correct, unfortunately. More to the point, you cannot have quantification over sets in first-order logic.</data>
      <data key="d11">117</data>
      <data key="d12">5.333</data>
      <data key="d13">0</data>
      <data key="d14">6.8</data>
      <data key="d15">0.1292</data>
      <data key="d16">Positive</data>
    </node>
    <node id="9gvpj5">
      <data key="d0">9gvpj5</data>
      <data key="d1">When building a web application (C#), is it better to have more Database columns, or more backend processing?</data>
      <data key="d2">0</data>
      <data key="d3">0.33</data>
      <data key="d4">0</data>
      <data key="d5">0</data>
    </node>
    <node id="e674yvs">
      <data key="d6">9gvpj5</data>
      <data key="d0">e674yvs</data>
      <data key="d7">mitchpllease</data>
      <data key="d8">1</data>
      <data key="d9">1537313362.0</data>
      <data key="d10">Typically you wouldn’t do either. You would have a separate privilege table and a table to join your users to privileges. The pair of primary keys of your user and role would be the the only information in this table and each row would be unique. If you wanted to find out the privileges a user had you would select all rows in the joiner table with the users primary key to retrieve the corresponding keys for the privileges. This way you only input a privilege once, reducing the chance of introducing a rouge privilege on each write to the database. You also save space as you do not have to store x instance of the string “user” or whatever roles you have... just a number </data>
      <data key="d11">677</data>
      <data key="d12">6.987</data>
      <data key="d13">0</data>
      <data key="d14">8.0</data>
      <data key="d15">0.432</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e6756bv">
      <data key="d6">e674yvs</data>
      <data key="d0">e6756bv</data>
      <data key="d7">SiliusSodus</data>
      <data key="d8">2</data>
      <data key="d9">1537313544.0</data>
      <data key="d10">Makes sense. I'm guessing I might not have thought through the normalization enough. And I'm guessing the query would just use a join statement in the query right? </data>
      <data key="d11">164</data>
      <data key="d12">5.783</data>
      <data key="d13">0</data>
      <data key="d14">5.2</data>
      <data key="d15">0.0987</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e675gaz">
      <data key="d6">e6756bv</data>
      <data key="d0">e675gaz</data>
      <data key="d7">mitchpllease</data>
      <data key="d8">1</data>
      <data key="d9">1537313780.0</data>
      <data key="d10">https://techbrij.com/custom-roleprovider-authorization-asp-net-mvc
I didn’t read this article, but there is a good picture of the three tables you need. The joiner table, I think this is the table you were referring to, will always exist. It’s sole purpose is to join users to roles so you can look them up when you need to. </data>
      <data key="d11">325</data>
      <data key="d12">6.186</data>
      <data key="d13">0</data>
      <data key="d14">9.0</data>
      <data key="d15">0.2962</data>
      <data key="d16">Positive</data>
    </node>
    <node id="9grnk7">
      <data key="d0">9grnk7</data>
      <data key="d1">How to make Mini Computer at Home</data>
      <data key="d2">0</data>
      <data key="d3">1.0</data>
      <data key="d4">1</data>
      <data key="d5">0</data>
    </node>
    <node id="e66dmq5" />
    <node id="9cw4yq">
      <data key="d0">9cw4yq</data>
      <data key="d1">World's first binary text encoding: Francis Bacon's 5-bit "Bi-literarie Alphabet" (1624)</data>
      <data key="d2">0</data>
      <data key="d3">0.97</data>
      <data key="d4">484</data>
      <data key="d5">0</data>
    </node>
    <node id="e5dlqqm">
      <data key="d6">9cw4yq</data>
      <data key="d0">e5dlqqm</data>
      <data key="d7">okayIfUSaySo</data>
      <data key="d8">30</data>
      <data key="d9">1536100659.0</data>
      <data key="d10">Originally published in Latin in *De dignitate et augmentis scientiarum*. This image is from the [1640 English translation](https://archive.org/stream/ofadvancementp00baco#page/266), entitled *Of the Advancement and Proficience of Learning*.

While Bacon recognized that a binary encoding could be useful for a wide variety of purposes, the specific purpose he had in mind was a [steganographic cipher](https://en.wikipedia.org/wiki/Steganography).</data>
      <data key="d11">448</data>
      <data key="d12">7.875</data>
      <data key="d13">0</data>
      <data key="d14">13.2</data>
      <data key="d15">0.0881</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5e6y1b">
      <data key="d6">9cw4yq</data>
      <data key="d0">e5e6y1b</data>
      <data key="d7">Scentable</data>
      <data key="d8">39</data>
      <data key="d9">1536119432.0</data>
      <data key="d10">Impreffive work, Francif!</data>
      <data key="d11">25</data>
      <data key="d17">7</data>
      <data key="d13">0</data>
      <data key="d14">9.2</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5eja0p" />
    <node id="e5dlmwn">
      <data key="d6">9cw4yq</data>
      <data key="d0">e5dlmwn</data>
      <data key="d7">dragonnyxx</data>
      <data key="d8">23</data>
      <data key="d9">1536100558.0</data>
      <data key="d10">So obviously I understand the value of a binary encoding in the modern world. But do we have any idea what value was perceived in this all the way back in 1624?</data>
      <data key="d11">160</data>
      <data key="d12">4.704</data>
      <data key="d13">0</data>
      <data key="d14">7.2</data>
      <data key="d15">0.34</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5ey760">
      <data key="d6">9cw4yq</data>
      <data key="d0">e5ey760</data>
      <data key="d7">bhez</data>
      <data key="d8">3</data>
      <data key="d9">1536145923.0</data>
      <data key="d10">That's really interesting. I see there is no representation of the letter I or numerals or spaces.</data>
      <data key="d11">98</data>
      <data key="d12">5.333</data>
      <data key="d13">0</data>
      <data key="d14">9.0</data>
      <data key="d15">0.0808</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5f9rev" />
    <node id="e5fho3h">
      <data key="d6">9cw4yq</data>
      <data key="d0">e5fho3h</data>
      <data key="d7">Praxon1</data>
      <data key="d8">2</data>
      <data key="d9">1536178672.0</data>
      <data key="d10">Why are the letters ”J” and ”U” missing? Or is it just me? 

Nevertheless, really cool. I instantly wanted to write a secret message in this binary alphabet (à la da Vinci, but without the mirrored text), but then I realized I have nothing interesting to secretly write down lol. </data>
      <data key="d11">280</data>
      <data key="d12">4.867</data>
      <data key="d13">0</data>
      <data key="d14">8.2</data>
      <data key="d15">0.0725</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5ecub2" />
    <node id="e661m0g" />
    <node id="e5dykns" />
    <node id="e5dscsz">
      <data key="d6">e5dlqqm</data>
      <data key="d0">e5dscsz</data>
      <data key="d7">pythor</data>
      <data key="d8">5</data>
      <data key="d9">1536106610.0</data>
      <data key="d10">It took me quite a bit to understand his explanation of how to use the biformed alphabet in the cipher.  It did not help at all that I can't tell the difference between the two versions of 'a' in it.  </data>
      <data key="d11">201</data>
      <data key="d12">4.844</data>
      <data key="d13">0</data>
      <data key="d14">8.7</data>
      <data key="d15">-0.1545</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e5dlr1g">
      <data key="d6">e5dlqqm</data>
      <data key="d0">e5dlr1g</data>
      <data key="d7">WikiTextBot</data>
      <data key="d8">5</data>
      <data key="d9">1536100667.0</data>
      <data key="d10">**Steganography**

Steganography ( ( listen) STEG-ə-NOG-rə-fee) is the practice of concealing a file, message, image, or video within another file, message, image, or video. The word steganography combines the Greek words steganos (στεγανός), meaning "covered, concealed, or protected", and graphein (γράφειν) meaning "writing".

The first recorded use of the term was in 1499 by Johannes Trithemius in his Steganographia, a treatise on cryptography and steganography, disguised as a book on magic. Generally, the hidden messages appear to be (or to be part of) something else: images, articles, shopping lists, or some other cover text.

***

^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/compsci/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]
^Downvote ^to ^remove ^| ^v0.28</data>
      <data key="d11">1064</data>
      <data key="d12">10.012</data>
      <data key="d13">2</data>
      <data key="d14">14.3</data>
      <data key="d15">-0.05</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e5ewyt3">
      <data key="d6">e5e6y1b</data>
      <data key="d0">e5ewyt3</data>
      <data key="d7">lakesObacon</data>
      <data key="d8">5</data>
      <data key="d9">1536144615.0</data>
      <data key="d10">Fo cool </data>
      <data key="d11">8</data>
      <data key="d17">3</data>
      <data key="d13">0</data>
      <data key="d14">2.9</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5dp868">
      <data key="d6">e5dlmwn</data>
      <data key="d0">e5dp868</data>
      <data key="d7">bonafidebob</data>
      <data key="d8">76</data>
      <data key="d9">1536103859.0</data>
      <data key="d10">It’s right there in the text!  So that we may signify the intentions of our mind ... at any distance or with sight ...  by way of anything that has two states.</data>
      <data key="d11">159</data>
      <data key="d12">4.133</data>
      <data key="d13">0</data>
      <data key="d14">2.7</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5dn92v">
      <data key="d6">e5dlmwn</data>
      <data key="d0">e5dn92v</data>
      <data key="d7">Anonymous</data>
      <data key="d8">5</data>
      <data key="d9">1536102070.0</data>
      <data key="d10">Steganography</data>
      <data key="d11">13</data>
      <data key="d17">13</data>
      <data key="d13">0</data>
      <data key="d14">20.2</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5dsum0">
      <data key="d6">e5dlmwn</data>
      <data key="d0">e5dsum0</data>
      <data key="d7">pythor</data>
      <data key="d8">8</data>
      <data key="d9">1536107040.0</data>
      <data key="d10">As a deeper explanation than others have given you (and because it took me a while to understand), there's a description in the book OP linked in his comment.

Essentially, take a string of text (Manere te volo donec venero).  This is your plaintext, and what anyone can read.  However, when you write it, you use what today we would call two different fonts.  Interpret one font as 'a' (or 0), the other as 'b' (or 1).  Your coded text (Fuge) is translated to binary, then the plaintext is written using the font pattern defined by the binary representation of the code.  F = aabab, so in the plain text, the first two letters are written in one font, as is the fourth, while the third and fifth letters are written in another font.  If we went with capital vs lowercase as our fonts, F translates to writing Maner as MAnEr.  

Hope that makes sense.  </data>
      <data key="d11">853</data>
      <data key="d12">6.32</data>
      <data key="d13">0</data>
      <data key="d14">7.6</data>
      <data key="d15">0.0575</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5eyiq4">
      <data key="d6">e5ey760</data>
      <data key="d0">e5eyiq4</data>
      <data key="d7">okayIfUSaySo</data>
      <data key="d8">3</data>
      <data key="d9">1536146255.0</data>
      <data key="d10">At the time, I and J were considered variations of the same letter, as were V and U.</data>
      <data key="d11">84</data>
      <data key="d12">4.267</data>
      <data key="d13">0</data>
      <data key="d14">6.8</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5fjj9i">
      <data key="d6">e5fho3h</data>
      <data key="d0">e5fjj9i</data>
      <data key="d7">okayIfUSaySo</data>
      <data key="d8">2</data>
      <data key="d9">1536180936.0</data>
      <data key="d10">&gt; Why are the letters ”J” and ”U” missing?

At the time, J was considered a variant of I, and U a variant of V.</data>
      <data key="d11">111</data>
      <data key="d12">4.5</data>
      <data key="d13">0</data>
      <data key="d14">4.4</data>
      <data key="d15">-0.148</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e5fiblm">
      <data key="d6">e5fho3h</data>
      <data key="d0">e5fiblm</data>
      <data key="d7">MathPolice</data>
      <data key="d8">1</data>
      <data key="d9">1536179481.0</data>
      <data key="d10">It's just you.

</data>
      <data key="d11">16</data>
      <data key="d12">3.667</data>
      <data key="d13">0</data>
      <data key="d14">-2.7</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5fnbgf">
      <data key="d6">e5dscsz</data>
      <data key="d0">e5fnbgf</data>
      <data key="d7">munificent</data>
      <data key="d8">2</data>
      <data key="d9">1536184890.0</data>
      <data key="d10">&gt; the two versions of 'a' in it. 

Uh, I'm pretty sure those are "a"'s and "b"'s.</data>
      <data key="d11">81</data>
      <data key="d12">3.188</data>
      <data key="d13">2</data>
      <data key="d14">1.7</data>
      <data key="d15">0.6705</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5es4kx">
      <data key="d6">e5dp868</data>
      <data key="d0">e5es4kx</data>
      <data key="d7">PM_ME_IRL</data>
      <data key="d8">13</data>
      <data key="d9">1536139676.0</data>
      <data key="d10">Sorry I don't speak fancy</data>
      <data key="d11">25</data>
      <data key="d12">4.2</data>
      <data key="d13">0</data>
      <data key="d14">2.9</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5dpnrp">
      <data key="d6">e5dn92v</data>
      <data key="d0">e5dpnrp</data>
      <data key="d7">geon</data>
      <data key="d8">33</data>
      <data key="d9">1536104244.0</data>
      <data key="d10">fteganography</data>
      <data key="d11">13</data>
      <data key="d17">13</data>
      <data key="d13">0</data>
      <data key="d14">20.2</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5fqwgm">
      <data key="d6">e5eyiq4</data>
      <data key="d0">e5fqwgm</data>
      <data key="d7">ggPeti</data>
      <data key="d8">2</data>
      <data key="d9">1536188165.0</data>
      <data key="d10">Wrong. All four letters appear, perfectly distinguished, in the source text, in the paragraph below the cipher.</data>
      <data key="d11">111</data>
      <data key="d12">6.429</data>
      <data key="d13">0</data>
      <data key="d14">8.7</data>
      <data key="d15">0.0801</data>
      <data key="d16">Positive</data>
    </node>
    <node id="e5hl8xl">
      <data key="d6">e5fiblm</data>
      <data key="d0">e5hl8xl</data>
      <data key="d7">TezlaKoil</data>
      <data key="d8">3</data>
      <data key="d9">1536261532.0</data>
      <data key="d10">It's ivst yov.</data>
      <data key="d11">14</data>
      <data key="d12">3.667</data>
      <data key="d13">0</data>
      <data key="d14">-2.7</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5fones">
      <data key="d6">e5fnbgf</data>
      <data key="d0">e5fones</data>
      <data key="d7">pythor</data>
      <data key="d8">3</data>
      <data key="d9">1536186132.0</data>
      <data key="d10">I was speaking of the alphabet provided on page 267.  Each letter in the alphabet (including capital and lowercase) has two versions (essentially different fonts).  One version has 'a' above it, while the other version has 'b' above it.  I can't tell the difference between the 'a' and 'b' versions of the lowercase 'a' character in the alphabet.  </data>
      <data key="d11">348</data>
      <data key="d12">7.417</data>
      <data key="d13">0</data>
      <data key="d14">10.1</data>
      <data key="d15">0.0193</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5esqo6">
      <data key="d6">e5es4kx</data>
      <data key="d0">e5esqo6</data>
      <data key="d7">OMGIMSOLOST</data>
      <data key="d8">19</data>
      <data key="d9">1536140287.0</data>
      <data key="d10">He's saying that he can convey any message at any distance with anything that you can use to represent two states. For example flashing a light on and off to send a message to a boat from shore. </data>
      <data key="d11">195</data>
      <data key="d12">5.167</data>
      <data key="d13">0</data>
      <data key="d14">7.2</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5gwlrt">
      <data key="d6">e5fqwgm</data>
      <data key="d0">e5gwlrt</data>
      <data key="d7">okayIfUSaySo</data>
      <data key="d8">1</data>
      <data key="d9">1536224637.0</data>
      <data key="d10">Wow I guess Francis Bacon was just an idiot and left out two letters of the alphabet for no reason, completely arbitrarily.</data>
      <data key="d11">123</data>
      <data key="d12">4.545</data>
      <data key="d13">0</data>
      <data key="d14">11.9</data>
      <data key="d15">-0.1779</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e5fp19m">
      <data key="d6">e5fones</data>
      <data key="d0">e5fp19m</data>
      <data key="d7">munificent</data>
      <data key="d8">1</data>
      <data key="d9">1536186487.0</data>
      <data key="d10">Oh, got it, sorry.</data>
      <data key="d11">18</data>
      <data key="d17">3</data>
      <data key="d13">0</data>
      <data key="d14">1.3</data>
      <data key="d15">-0.0772</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e5olnkn">
      <data key="d6">e5esqo6</data>
      <data key="d0">e5olnkn</data>
      <data key="d7">trichotillofobia</data>
      <data key="d8">1</data>
      <data key="d9">1536552814.0</data>
      <data key="d10">Or using trumpets!</data>
      <data key="d11">18</data>
      <data key="d17">5</data>
      <data key="d13">0</data>
      <data key="d14">5.6</data>
      <data key="d15">0.0</data>
      <data key="d16">Neutral</data>
    </node>
    <node id="e5hiz68">
      <data key="d6">e5gwlrt</data>
      <data key="d0">e5hiz68</data>
      <data key="d7">ggPeti</data>
      <data key="d8">1</data>
      <data key="d9">1536257345.0</data>
      <data key="d10">You're full of terrible guesses.</data>
      <data key="d11">32</data>
      <data key="d12">5.4</data>
      <data key="d13">0</data>
      <data key="d14">5.2</data>
      <data key="d15">-0.4767</data>
      <data key="d16">Negative</data>
    </node>
    <node id="e5fpnty">
      <data key="d6">e5fp19m</data>
      <data key="d0">e5fpnty</data>
      <data key="d7">pythor</data>
      <data key="d8">2</data>
      <data key="d9">1536187049.0</data>
      <data key="d10">No need to be sorry.  If you misunderstood, others probably did too, so you gave me a chance to explain better.  Thanks. :)</data>
      <data key="d11">123</data>
      <data key="d12">4.476</data>
      <data key="d13">0</data>
      <data key="d14">6.4</data>
      <data key="d15">0.1468</data>
      <data key="d16">Positive</data>
    </node>
    <node id="you-get-an-upvote">
      <data key="d18">you-get-an-upvote</data>
    </node>
    <node id="zergling_Lester">
      <data key="d18">zergling_Lester</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="criticalcontext">
      <data key="d18">criticalcontext</data>
    </node>
    <node id="celerym">
      <data key="d18">celerym</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="ChemicalDare">
      <data key="d18">ChemicalDare</data>
    </node>
    <node id="jourmungandr">
      <data key="d18">jourmungandr</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="ignacioMendez">
      <data key="d18">ignacioMendez</data>
    </node>
    <node id="Meguli">
      <data key="d18">Meguli</data>
    </node>
    <node id="SnowceanJay">
      <data key="d18">SnowceanJay</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="HelperBot_">
      <data key="d18">HelperBot_</data>
    </node>
    <node id="specalight">
      <data key="d18">specalight</data>
    </node>
    <node id="WikiTextBot">
      <data key="d18">WikiTextBot</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="noam_compsci">
      <data key="d18">noam_compsci</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="WikiTextBot">
      <data key="d18">WikiTextBot</data>
    </node>
    <node id="gabe870">
      <data key="d18">gabe870</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="jourmungandr">
      <data key="d18">jourmungandr</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="ReginaldIII">
      <data key="d18">ReginaldIII</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="jourmungandr">
      <data key="d18">jourmungandr</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="sagaciux">
      <data key="d18">sagaciux</data>
    </node>
    <node id="ZaynThomas">
      <data key="d18">ZaynThomas</data>
    </node>
    <node id="noam_compsci">
      <data key="d18">noam_compsci</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="daermonn">
      <data key="d18">daermonn</data>
    </node>
    <node id="Anonymous">
      <data key="d18">Anonymous</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="WikiTextBot">
      <data key="d18">WikiTextBot</data>
    </node>
    <node id="Anonymous">
      <data key="d18">Anonymous</data>
    </node>
    <node id="gabe870">
      <data key="d18">gabe870</data>
    </node>
    <node id="Meguli">
      <data key="d18">Meguli</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="sagaciux">
      <data key="d18">sagaciux</data>
    </node>
    <node id="ErrantRailer">
      <data key="d18">ErrantRailer</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="testq90">
      <data key="d18">testq90</data>
    </node>
    <node id="pdxdabel">
      <data key="d18">pdxdabel</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="AndASM">
      <data key="d18">AndASM</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="sagaciux">
      <data key="d18">sagaciux</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="asdqqqq">
      <data key="d18">asdqqqq</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="dnabre">
      <data key="d18">dnabre</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="ProgrammerBro">
      <data key="d18">ProgrammerBro</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="dabombnl">
      <data key="d18">dabombnl</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="you-get-an-upvote">
      <data key="d18">you-get-an-upvote</data>
    </node>
    <node id="sagaciux">
      <data key="d18">sagaciux</data>
    </node>
    <node id="UnderTruth">
      <data key="d18">UnderTruth</data>
    </node>
    <node id="sagaciux">
      <data key="d18">sagaciux</data>
    </node>
    <node id="Freak139">
      <data key="d18">Freak139</data>
    </node>
    <node id="WeirdEidolon">
      <data key="d18">WeirdEidolon</data>
    </node>
    <node id="daermonn">
      <data key="d18">daermonn</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="Ragnarock14">
      <data key="d18">Ragnarock14</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="rudster">
      <data key="d18">rudster</data>
    </node>
    <node id="Rococoon">
      <data key="d18">Rococoon</data>
    </node>
    <node id="sagaciux">
      <data key="d18">sagaciux</data>
    </node>
    <node id="Edumacated1980">
      <data key="d18">Edumacated1980</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="cirosantilli">
      <data key="d18">cirosantilli</data>
    </node>
    <node id="sagaciux">
      <data key="d18">sagaciux</data>
    </node>
    <node id="soto_okami">
      <data key="d18">soto_okami</data>
    </node>
    <node id="kiwi0fruit">
      <data key="d18">kiwi0fruit</data>
    </node>
    <node id="jx4713">
      <data key="d18">jx4713</data>
    </node>
    <node id="Ragnarock14">
      <data key="d18">Ragnarock14</data>
    </node>
    <node id="spicy45">
      <data key="d18">spicy45</data>
    </node>
    <node id="vidro3">
      <data key="d18">vidro3</data>
    </node>
    <node id="Crysis456">
      <data key="d18">Crysis456</data>
    </node>
    <node id="Ikor_Genorio">
      <data key="d18">Ikor_Genorio</data>
    </node>
    <node id="Mmsn1234">
      <data key="d18">Mmsn1234</data>
    </node>
    <node id="specalight">
      <data key="d18">specalight</data>
    </node>
    <node id="nuphilomath">
      <data key="d18">nuphilomath</data>
    </node>
    <node id="UnconstitutionalSir">
      <data key="d18">UnconstitutionalSir</data>
    </node>
    <node id="UnconstitutionalSir">
      <data key="d18">UnconstitutionalSir</data>
    </node>
    <node id="TomvdZ">
      <data key="d18">TomvdZ</data>
    </node>
    <node id="mulletlaw">
      <data key="d18">mulletlaw</data>
    </node>
    <node id="Crysis456">
      <data key="d18">Crysis456</data>
    </node>
    <node id="PM_ME_IRL">
      <data key="d18">PM_ME_IRL</data>
    </node>
    <node id="jx4713">
      <data key="d18">jx4713</data>
    </node>
    <node id="mr_clauford">
      <data key="d18">mr_clauford</data>
    </node>
    <node id="UnconstitutionalSir">
      <data key="d18">UnconstitutionalSir</data>
    </node>
    <node id="Anonymous">
      <data key="d18">Anonymous</data>
    </node>
    <node id="PM_ME_IRL">
      <data key="d18">PM_ME_IRL</data>
    </node>
    <node id="Anonymous">
      <data key="d18">Anonymous</data>
    </node>
    <node id="UnconstitutionalSir">
      <data key="d18">UnconstitutionalSir</data>
    </node>
    <node id="PM_ME_IRL">
      <data key="d18">PM_ME_IRL</data>
    </node>
    <node id="jx4713">
      <data key="d18">jx4713</data>
    </node>
    <node id="Ragnarock14">
      <data key="d18">Ragnarock14</data>
    </node>
    <node id="AceOfShades_">
      <data key="d18">AceOfShades_</data>
    </node>
    <node id="mitchpllease">
      <data key="d18">mitchpllease</data>
    </node>
    <node id="cirosantilli">
      <data key="d18">cirosantilli</data>
    </node>
    <node id="SiliusSodus">
      <data key="d18">SiliusSodus</data>
    </node>
    <node id="Ikor_Genorio">
      <data key="d18">Ikor_Genorio</data>
    </node>
    <node id="mostlikelynotarobot">
      <data key="d18">mostlikelynotarobot</data>
    </node>
    <node id="mitchpllease">
      <data key="d18">mitchpllease</data>
    </node>
    <node id="Ragnarock14">
      <data key="d18">Ragnarock14</data>
    </node>
    <node id="quiteamess">
      <data key="d18">quiteamess</data>
    </node>
    <node id="AutoModerator">
      <data key="d18">AutoModerator</data>
    </node>
    <node id="Ikor_Genorio">
      <data key="d18">Ikor_Genorio</data>
    </node>
    <node id="okayIfUSaySo">
      <data key="d18">okayIfUSaySo</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="Ragnarock14">
      <data key="d18">Ragnarock14</data>
    </node>
    <node id="GayMakeAndModel">
      <data key="d18">GayMakeAndModel</data>
    </node>
    <node id="Scentable">
      <data key="d18">Scentable</data>
    </node>
    <node id="rozling">
      <data key="d18">rozling</data>
    </node>
    <node id="dragonnyxx">
      <data key="d18">dragonnyxx</data>
    </node>
    <node id="bhez">
      <data key="d18">bhez</data>
    </node>
    <node id="dances_with_poodles">
      <data key="d18">dances_with_poodles</data>
    </node>
    <node id="Praxon1">
      <data key="d18">Praxon1</data>
    </node>
    <node id="laxatives">
      <data key="d18">laxatives</data>
    </node>
    <node id="specalight">
      <data key="d18">specalight</data>
    </node>
    <node id="nah248">
      <data key="d18">nah248</data>
    </node>
    <node id="sweetsmellingrosie">
      <data key="d18">sweetsmellingrosie</data>
    </node>
    <node id="lissofossil">
      <data key="d18">lissofossil</data>
    </node>
    <node id="pythor">
      <data key="d18">pythor</data>
    </node>
    <node id="you-get-an-upvote">
      <data key="d18">you-get-an-upvote</data>
    </node>
    <node id="WikiTextBot">
      <data key="d18">WikiTextBot</data>
    </node>
    <node id="ZaynThomas">
      <data key="d18">ZaynThomas</data>
    </node>
    <node id="lakesObacon">
      <data key="d18">lakesObacon</data>
    </node>
    <node id="bonafidebob">
      <data key="d18">bonafidebob</data>
    </node>
    <node id="Anonymous">
      <data key="d18">Anonymous</data>
    </node>
    <node id="hindmost-one">
      <data key="d18">hindmost-one</data>
    </node>
    <node id="tjorg35">
      <data key="d18">tjorg35</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="pythor">
      <data key="d18">pythor</data>
    </node>
    <node id="okayIfUSaySo">
      <data key="d18">okayIfUSaySo</data>
    </node>
    <node id="tjorg35">
      <data key="d18">tjorg35</data>
    </node>
    <node id="okayIfUSaySo">
      <data key="d18">okayIfUSaySo</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="MathPolice">
      <data key="d18">MathPolice</data>
    </node>
    <node id="vidro3">
      <data key="d18">vidro3</data>
    </node>
    <node id="munificent">
      <data key="d18">munificent</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="PM_ME_IRL">
      <data key="d18">PM_ME_IRL</data>
    </node>
    <node id="jourmungandr">
      <data key="d18">jourmungandr</data>
    </node>
    <node id="geon">
      <data key="d18">geon</data>
    </node>
    <node id="tjorg35">
      <data key="d18">tjorg35</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="ggPeti">
      <data key="d18">ggPeti</data>
    </node>
    <node id="Aatch">
      <data key="d18">Aatch</data>
    </node>
    <node id="TezlaKoil">
      <data key="d18">TezlaKoil</data>
    </node>
    <node id="AndreasTPC">
      <data key="d18">AndreasTPC</data>
    </node>
    <node id="pythor">
      <data key="d18">pythor</data>
    </node>
    <node id="Aatch">
      <data key="d18">Aatch</data>
    </node>
    <node id="OMGIMSOLOST">
      <data key="d18">OMGIMSOLOST</data>
    </node>
    <node id="specalight">
      <data key="d18">specalight</data>
    </node>
    <node id="okayIfUSaySo">
      <data key="d18">okayIfUSaySo</data>
    </node>
    <node id="munificent">
      <data key="d18">munificent</data>
    </node>
    <node id="trichotillofobia">
      <data key="d18">trichotillofobia</data>
    </node>
    <node id="ggPeti">
      <data key="d18">ggPeti</data>
    </node>
    <node id="pythor">
      <data key="d18">pythor</data>
    </node>
    <node id="hextree">
      <data key="d18">hextree</data>
    </node>
    <node id="ManageableGrip">
      <data key="d18">ManageableGrip</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="FUZxxl">
      <data key="d18">FUZxxl</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="c0deb0t">
      <data key="d18">c0deb0t</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="Edumacated1980">
      <data key="d18">Edumacated1980</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="tjorg35">
      <data key="d18">tjorg35</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="vidro3">
      <data key="d18">vidro3</data>
    </node>
    <node id="rumliegen">
      <data key="d18">rumliegen</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="soto_okami">
      <data key="d18">soto_okami</data>
    </node>
    <node id="jourmungandr">
      <data key="d18">jourmungandr</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="rudster">
      <data key="d18">rudster</data>
    </node>
    <node id="PrimesAreMyFavorite">
      <data key="d18">PrimesAreMyFavorite</data>
    </node>
    <node id="you-get-an-upvote">
      <data key="d18">you-get-an-upvote</data>
    </node>
    <node id="Snonner">
      <data key="d18">Snonner</data>
    </node>
    <node id="gabe870">
      <data key="d18">gabe870</data>
    </node>
    <node id="BombadilEatsTheRing">
      <data key="d18">BombadilEatsTheRing</data>
    </node>
    <node id="Positive">
      <data key="d18">Positive</data>
    </node>
    <node id="Neutral">
      <data key="d18">Neutral</data>
    </node>
    <node id="Negative">
      <data key="d18">Negative</data>
    </node>
    <edge source="9gxkfi" target="e67kej6" />
    <edge source="9gxkfi" target="e67n3mc" />
    <edge source="e67kej6" target="testq90" />
    <edge source="e67kej6" target="e67n3mc" />
    <edge source="e67kej6" target="Positive" />
    <edge source="e67n3mc" target="Snonner" />
    <edge source="e67n3mc" target="Neutral" />
    <edge source="9fui2s" target="e60dtr7" />
    <edge source="9fui2s" target="e5zhzlj" />
    <edge source="9fui2s" target="e645h0k" />
    <edge source="9fui2s" target="e65rf4x" />
    <edge source="9fui2s" target="e678vds" />
    <edge source="9fui2s" target="e622y3r" />
    <edge source="9fui2s" target="e5ziqig" />
    <edge source="9fui2s" target="e645lrf" />
    <edge source="9fui2s" target="e65t4hi" />
    <edge source="9fui2s" target="e5zqb9p" />
    <edge source="9fui2s" target="e648hdr" />
    <edge source="9fui2s" target="e6491wc" />
    <edge source="9fui2s" target="e623ao1" />
    <edge source="9fui2s" target="e62hg3k" />
    <edge source="9fui2s" target="e62zbml" />
    <edge source="9fui2s" target="e64hah5" />
    <edge source="e60dtr7" target="hindmost-one" />
    <edge source="e60dtr7" target="e622y3r" />
    <edge source="e60dtr7" target="Positive" />
    <edge source="e5zhzlj" target="c0deb0t" />
    <edge source="e5zhzlj" target="e5ziqig" />
    <edge source="e5zhzlj" target="Positive" />
    <edge source="e645h0k" target="soto_okami" />
    <edge source="e645h0k" target="soto_okami" />
    <edge source="e645h0k" target="e645lrf" />
    <edge source="e645h0k" target="Neutral" />
    <edge source="e65rf4x" target="Edumacated1980" />
    <edge source="e65rf4x" target="Edumacated1980" />
    <edge source="e65rf4x" target="e65t4hi" />
    <edge source="e65rf4x" target="Negative" />
    <edge source="e678vds" target="hextree" />
    <edge source="e678vds" target="Negative" />
    <edge source="e622y3r" target="Ragnarock14" />
    <edge source="e622y3r" target="Ragnarock14" />
    <edge source="e622y3r" target="Ragnarock14" />
    <edge source="e622y3r" target="Ragnarock14" />
    <edge source="e622y3r" target="Ragnarock14" />
    <edge source="e622y3r" target="Positive" />
    <edge source="e5ziqig" target="Ragnarock14" />
    <edge source="e5ziqig" target="Ragnarock14" />
    <edge source="e5ziqig" target="Ragnarock14" />
    <edge source="e5ziqig" target="Ragnarock14" />
    <edge source="e5ziqig" target="Ragnarock14" />
    <edge source="e5ziqig" target="e5zqb9p" />
    <edge source="e5ziqig" target="Negative" />
    <edge source="e645lrf" target="Freak139" />
    <edge source="e645lrf" target="e648hdr" />
    <edge source="e645lrf" target="e6491wc" />
    <edge source="e645lrf" target="Neutral" />
    <edge source="e65t4hi" target="Ragnarock14" />
    <edge source="e65t4hi" target="Ragnarock14" />
    <edge source="e65t4hi" target="Ragnarock14" />
    <edge source="e65t4hi" target="Ragnarock14" />
    <edge source="e65t4hi" target="Ragnarock14" />
    <edge source="e65t4hi" target="Neutral" />
    <edge source="e5zqb9p" target="Ikor_Genorio" />
    <edge source="e5zqb9p" target="Ikor_Genorio" />
    <edge source="e5zqb9p" target="Ikor_Genorio" />
    <edge source="e5zqb9p" target="e623ao1" />
    <edge source="e5zqb9p" target="Positive" />
    <edge source="e648hdr" target="soto_okami" />
    <edge source="e648hdr" target="soto_okami" />
    <edge source="e648hdr" target="Neutral" />
    <edge source="e6491wc" target="Edumacated1980" />
    <edge source="e6491wc" target="Edumacated1980" />
    <edge source="e6491wc" target="Neutral" />
    <edge source="e623ao1" target="Ragnarock14" />
    <edge source="e623ao1" target="Ragnarock14" />
    <edge source="e623ao1" target="Ragnarock14" />
    <edge source="e623ao1" target="Ragnarock14" />
    <edge source="e623ao1" target="Ragnarock14" />
    <edge source="e623ao1" target="e62hg3k" />
    <edge source="e623ao1" target="Neutral" />
    <edge source="e62hg3k" target="Ikor_Genorio" />
    <edge source="e62hg3k" target="Ikor_Genorio" />
    <edge source="e62hg3k" target="Ikor_Genorio" />
    <edge source="e62hg3k" target="e62zbml" />
    <edge source="e62hg3k" target="Neutral" />
    <edge source="e62zbml" target="Ragnarock14" />
    <edge source="e62zbml" target="Ragnarock14" />
    <edge source="e62zbml" target="Ragnarock14" />
    <edge source="e62zbml" target="Ragnarock14" />
    <edge source="e62zbml" target="Ragnarock14" />
    <edge source="e62zbml" target="e64hah5" />
    <edge source="e62zbml" target="Positive" />
    <edge source="e64hah5" target="Ikor_Genorio" />
    <edge source="e64hah5" target="Ikor_Genorio" />
    <edge source="e64hah5" target="Ikor_Genorio" />
    <edge source="e64hah5" target="Negative" />
    <edge source="9grbgu" target="e66bw67" />
    <edge source="e66bw67" target="mr_clauford" />
    <edge source="e66bw67" target="Positive" />
    <edge source="9gu1t8" target="e670bcu" />
    <edge source="9gu1t8" target="e671dfv" />
    <edge source="9gu1t8" target="e673vc9" />
    <edge source="e670bcu" target="cirosantilli" />
    <edge source="e670bcu" target="cirosantilli" />
    <edge source="e670bcu" target="e671dfv" />
    <edge source="e670bcu" target="Positive" />
    <edge source="e671dfv" target="mulletlaw" />
    <edge source="e671dfv" target="e673vc9" />
    <edge source="e671dfv" target="Positive" />
    <edge source="e673vc9" target="cirosantilli" />
    <edge source="e673vc9" target="cirosantilli" />
    <edge source="e673vc9" target="Positive" />
    <edge source="9gplp9" target="e660uy8" />
    <edge source="9gplp9" target="e66cogr" />
    <edge source="9gplp9" target="e66wtxn" />
    <edge source="9gplp9" target="e66dpry" />
    <edge source="9gplp9" target="e66ay2a" />
    <edge source="9gplp9" target="e66eyrj" />
    <edge source="9gplp9" target="e66kcmo" />
    <edge source="9gplp9" target="e66mtkp" />
    <edge source="9gplp9" target="e66p0ej" />
    <edge source="9gplp9" target="e66vqys" />
    <edge source="9gplp9" target="e65yrqi" />
    <edge source="9gplp9" target="e65xlxe" />
    <edge source="9gplp9" target="e667csi" />
    <edge source="9gplp9" target="e662mt5" />
    <edge source="9gplp9" target="e66268p" />
    <edge source="9gplp9" target="e66fi7p" />
    <edge source="9gplp9" target="e677ns7" />
    <edge source="9gplp9" target="e66eafi" />
    <edge source="9gplp9" target="e66bivf" />
    <edge source="9gplp9" target="e66fbtj" />
    <edge source="9gplp9" target="e6785q3" />
    <edge source="9gplp9" target="e677rih" />
    <edge source="9gplp9" target="e660g30" />
    <edge source="9gplp9" target="e6640fx" />
    <edge source="9gplp9" target="e662mfn" />
    <edge source="9gplp9" target="e672z2v" />
    <edge source="9gplp9" target="e6799eb" />
    <edge source="9gplp9" target="e66ecau" />
    <edge source="9gplp9" target="e66csei" />
    <edge source="9gplp9" target="e66frif" />
    <edge source="9gplp9" target="e665pt2" />
    <edge source="9gplp9" target="e667jvl" />
    <edge source="9gplp9" target="e665hm0" />
    <edge source="9gplp9" target="e67a19p" />
    <edge source="9gplp9" target="e66elwc" />
    <edge source="9gplp9" target="e66hd3o" />
    <edge source="9gplp9" target="e666q4o" />
    <edge source="9gplp9" target="e6680eg" />
    <edge source="9gplp9" target="e67aaq7" />
    <edge source="9gplp9" target="e66alo4" />
    <edge source="9gplp9" target="e667221" />
    <edge source="9gplp9" target="e66bfuk" />
    <edge source="9gplp9" target="e67b4sq" />
    <edge source="9gplp9" target="e66bpqk" />
    <edge source="9gplp9" target="e66brjn" />
    <edge source="9gplp9" target="e66c3c3" />
    <edge source="9gplp9" target="e66a4ce" />
    <edge source="9gplp9" target="e66dmtf" />
    <edge source="9gplp9" target="e66cfeu" />
    <edge source="9gplp9" target="e66ehu7" />
    <edge source="9gplp9" target="e66cxfp" />
    <edge source="9gplp9" target="e66c40k" />
    <edge source="9gplp9" target="e66flts" />
    <edge source="9gplp9" target="e66dn32" />
    <edge source="9gplp9" target="e66ey41" />
    <edge source="9gplp9" target="e66ennb" />
    <edge source="9gplp9" target="e66cu98" />
    <edge source="9gplp9" target="e67fp1p" />
    <edge source="9gplp9" target="e66h689" />
    <edge source="9gplp9" target="e66z9i6" />
    <edge source="9gplp9" target="e66f48l" />
    <edge source="9gplp9" target="e66dvea" />
    <edge source="9gplp9" target="e678xjb" />
    <edge source="9gplp9" target="e67afj8" />
    <edge source="9gplp9" target="e66gjoi" />
    <edge source="9gplp9" target="e67bm2a" />
    <edge source="9gplp9" target="e67cx1v" />
    <edge source="e660uy8" target="specalight" />
    <edge source="e660uy8" target="specalight" />
    <edge source="e660uy8" target="specalight" />
    <edge source="e660uy8" target="specalight" />
    <edge source="e660uy8" target="e662mt5" />
    <edge source="e660uy8" target="e66268p" />
    <edge source="e660uy8" target="Neutral" />
    <edge source="e66cogr" target="rudster" />
    <edge source="e66cogr" target="rudster" />
    <edge source="e66cogr" target="e66fi7p" />
    <edge source="e66cogr" target="Positive" />
    <edge source="e66wtxn" target="vidro3" />
    <edge source="e66wtxn" target="vidro3" />
    <edge source="e66wtxn" target="vidro3" />
    <edge source="e66wtxn" target="e677ns7" />
    <edge source="e66wtxn" target="Neutral" />
    <edge source="e66dpry" target="laxatives" />
    <edge source="e66dpry" target="e66eafi" />
    <edge source="e66dpry" target="Positive" />
    <edge source="e66ay2a" target="tjorg35" />
    <edge source="e66ay2a" target="tjorg35" />
    <edge source="e66ay2a" target="tjorg35" />
    <edge source="e66ay2a" target="tjorg35" />
    <edge source="e66ay2a" target="e66bivf" />
    <edge source="e66ay2a" target="Positive" />
    <edge source="e66eyrj" target="tjorg35" />
    <edge source="e66eyrj" target="tjorg35" />
    <edge source="e66eyrj" target="tjorg35" />
    <edge source="e66eyrj" target="tjorg35" />
    <edge source="e66eyrj" target="e66fbtj" />
    <edge source="e66eyrj" target="Negative" />
    <edge source="e66kcmo" target="rumliegen" />
    <edge source="e66kcmo" target="e6785q3" />
    <edge source="e66kcmo" target="Positive" />
    <edge source="e66mtkp" target="FUZxxl" />
    <edge source="e66mtkp" target="Positive" />
    <edge source="e66p0ej" target="ZaynThomas" />
    <edge source="e66p0ej" target="ZaynThomas" />
    <edge source="e66p0ej" target="Neutral" />
    <edge source="e66vqys" target="AceOfShades_" />
    <edge source="e66vqys" target="e677rih" />
    <edge source="e66vqys" target="Neutral" />
    <edge source="e65yrqi" target="ErrantRailer" />
    <edge source="e65yrqi" target="e660g30" />
    <edge source="e65yrqi" target="Positive" />
    <edge source="e65xlxe" target="ChemicalDare" />
    <edge source="e65xlxe" target="Positive" />
    <edge source="e667csi" target="nuphilomath" />
    <edge source="e667csi" target="Positive" />
    <edge source="e662mt5" target="ignacioMendez" />
    <edge source="e662mt5" target="e6640fx" />
    <edge source="e662mt5" target="Negative" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="BombadilEatsTheRing" />
    <edge source="e66268p" target="e662mfn" />
    <edge source="e66268p" target="Positive" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="BombadilEatsTheRing" />
    <edge source="e66fi7p" target="e672z2v" />
    <edge source="e66fi7p" target="Positive" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="BombadilEatsTheRing" />
    <edge source="e677ns7" target="e6799eb" />
    <edge source="e677ns7" target="Positive" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="BombadilEatsTheRing" />
    <edge source="e66eafi" target="e66ecau" />
    <edge source="e66eafi" target="Positive" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="BombadilEatsTheRing" />
    <edge source="e66bivf" target="e66csei" />
    <edge source="e66bivf" target="Negative" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="BombadilEatsTheRing" />
    <edge source="e66fbtj" target="e66frif" />
    <edge source="e66fbtj" target="Positive" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="BombadilEatsTheRing" />
    <edge source="e6785q3" target="Positive" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="BombadilEatsTheRing" />
    <edge source="e677rih" target="Positive" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="BombadilEatsTheRing" />
    <edge source="e660g30" target="Positive" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="BombadilEatsTheRing" />
    <edge source="e6640fx" target="e665pt2" />
    <edge source="e6640fx" target="e667jvl" />
    <edge source="e6640fx" target="Positive" />
    <edge source="e662mfn" target="PrimesAreMyFavorite" />
    <edge source="e662mfn" target="e665hm0" />
    <edge source="e662mfn" target="Neutral" />
    <edge source="e672z2v" target="rudster" />
    <edge source="e672z2v" target="rudster" />
    <edge source="e672z2v" target="Neutral" />
    <edge source="e6799eb" target="vidro3" />
    <edge source="e6799eb" target="vidro3" />
    <edge source="e6799eb" target="vidro3" />
    <edge source="e6799eb" target="e67a19p" />
    <edge source="e6799eb" target="Positive" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="BombadilEatsTheRing" />
    <edge source="e66ecau" target="Neutral" />
    <edge source="e66csei" target="tjorg35" />
    <edge source="e66csei" target="tjorg35" />
    <edge source="e66csei" target="tjorg35" />
    <edge source="e66csei" target="tjorg35" />
    <edge source="e66csei" target="e66elwc" />
    <edge source="e66csei" target="Neutral" />
    <edge source="e66frif" target="tjorg35" />
    <edge source="e66frif" target="tjorg35" />
    <edge source="e66frif" target="tjorg35" />
    <edge source="e66frif" target="tjorg35" />
    <edge source="e66frif" target="e66hd3o" />
    <edge source="e66frif" target="Positive" />
    <edge source="e665pt2" target="specalight" />
    <edge source="e665pt2" target="specalight" />
    <edge source="e665pt2" target="specalight" />
    <edge source="e665pt2" target="specalight" />
    <edge source="e665pt2" target="e666q4o" />
    <edge source="e665pt2" target="Positive" />
    <edge source="e667jvl" target="Aatch" />
    <edge source="e667jvl" target="Aatch" />
    <edge source="e667jvl" target="e6680eg" />
    <edge source="e667jvl" target="Positive" />
    <edge source="e665hm0" target="ManageableGrip" />
    <edge source="e665hm0" target="Neutral" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="BombadilEatsTheRing" />
    <edge source="e67a19p" target="e67aaq7" />
    <edge source="e67a19p" target="Positive" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="BombadilEatsTheRing" />
    <edge source="e66elwc" target="Positive" />
    <edge source="e66hd3o" target="AndreasTPC" />
    <edge source="e66hd3o" target="Neutral" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="BombadilEatsTheRing" />
    <edge source="e666q4o" target="e66alo4" />
    <edge source="e666q4o" target="e667221" />
    <edge source="e666q4o" target="Negative" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="BombadilEatsTheRing" />
    <edge source="e6680eg" target="e66bfuk" />
    <edge source="e6680eg" target="Positive" />
    <edge source="e67aaq7" target="vidro3" />
    <edge source="e67aaq7" target="vidro3" />
    <edge source="e67aaq7" target="vidro3" />
    <edge source="e67aaq7" target="e67b4sq" />
    <edge source="e67aaq7" target="Neutral" />
    <edge source="e66alo4" target="jourmungandr" />
    <edge source="e66alo4" target="jourmungandr" />
    <edge source="e66alo4" target="jourmungandr" />
    <edge source="e66alo4" target="jourmungandr" />
    <edge source="e66alo4" target="jourmungandr" />
    <edge source="e66alo4" target="e66bpqk" />
    <edge source="e66alo4" target="e66brjn" />
    <edge source="e66alo4" target="Neutral" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="BombadilEatsTheRing" />
    <edge source="e667221" target="e66c3c3" />
    <edge source="e667221" target="e66a4ce" />
    <edge source="e667221" target="Negative" />
    <edge source="e66bfuk" target="Aatch" />
    <edge source="e66bfuk" target="Aatch" />
    <edge source="e66bfuk" target="Neutral" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="BombadilEatsTheRing" />
    <edge source="e67b4sq" target="Neutral" />
    <edge source="e66bpqk" target="you-get-an-upvote" />
    <edge source="e66bpqk" target="you-get-an-upvote" />
    <edge source="e66bpqk" target="you-get-an-upvote" />
    <edge source="e66bpqk" target="you-get-an-upvote" />
    <edge source="e66bpqk" target="e66dmtf" />
    <edge source="e66bpqk" target="Negative" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="BombadilEatsTheRing" />
    <edge source="e66brjn" target="e66cfeu" />
    <edge source="e66brjn" target="e66ehu7" />
    <edge source="e66brjn" target="Negative" />
    <edge source="e66c3c3" target="specalight" />
    <edge source="e66c3c3" target="specalight" />
    <edge source="e66c3c3" target="specalight" />
    <edge source="e66c3c3" target="specalight" />
    <edge source="e66c3c3" target="e66cxfp" />
    <edge source="e66c3c3" target="Negative" />
    <edge source="e66a4ce" target="gabe870" />
    <edge source="e66a4ce" target="gabe870" />
    <edge source="e66a4ce" target="gabe870" />
    <edge source="e66a4ce" target="e66c40k" />
    <edge source="e66a4ce" target="Positive" />
    <edge source="e66dmtf" target="jourmungandr" />
    <edge source="e66dmtf" target="jourmungandr" />
    <edge source="e66dmtf" target="jourmungandr" />
    <edge source="e66dmtf" target="jourmungandr" />
    <edge source="e66dmtf" target="jourmungandr" />
    <edge source="e66dmtf" target="e66flts" />
    <edge source="e66dmtf" target="Positive" />
    <edge source="e66cfeu" target="you-get-an-upvote" />
    <edge source="e66cfeu" target="you-get-an-upvote" />
    <edge source="e66cfeu" target="you-get-an-upvote" />
    <edge source="e66cfeu" target="you-get-an-upvote" />
    <edge source="e66cfeu" target="e66dn32" />
    <edge source="e66cfeu" target="Positive" />
    <edge source="e66ehu7" target="jourmungandr" />
    <edge source="e66ehu7" target="jourmungandr" />
    <edge source="e66ehu7" target="jourmungandr" />
    <edge source="e66ehu7" target="jourmungandr" />
    <edge source="e66ehu7" target="jourmungandr" />
    <edge source="e66ehu7" target="e66ey41" />
    <edge source="e66ehu7" target="Neutral" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="BombadilEatsTheRing" />
    <edge source="e66cxfp" target="e66ennb" />
    <edge source="e66cxfp" target="Positive" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="BombadilEatsTheRing" />
    <edge source="e66c40k" target="e66cu98" />
    <edge source="e66c40k" target="Positive" />
    <edge source="e66flts" target="you-get-an-upvote" />
    <edge source="e66flts" target="you-get-an-upvote" />
    <edge source="e66flts" target="you-get-an-upvote" />
    <edge source="e66flts" target="you-get-an-upvote" />
    <edge source="e66flts" target="e67fp1p" />
    <edge source="e66flts" target="Positive" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="BombadilEatsTheRing" />
    <edge source="e66dn32" target="e66h689" />
    <edge source="e66dn32" target="Positive" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="BombadilEatsTheRing" />
    <edge source="e66ey41" target="e66z9i6" />
    <edge source="e66ey41" target="Positive" />
    <edge source="e66ennb" target="specalight" />
    <edge source="e66ennb" target="specalight" />
    <edge source="e66ennb" target="specalight" />
    <edge source="e66ennb" target="specalight" />
    <edge source="e66ennb" target="e66f48l" />
    <edge source="e66ennb" target="Positive" />
    <edge source="e66cu98" target="gabe870" />
    <edge source="e66cu98" target="gabe870" />
    <edge source="e66cu98" target="gabe870" />
    <edge source="e66cu98" target="e66dvea" />
    <edge source="e66cu98" target="Neutral" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="BombadilEatsTheRing" />
    <edge source="e67fp1p" target="Positive" />
    <edge source="e66h689" target="you-get-an-upvote" />
    <edge source="e66h689" target="you-get-an-upvote" />
    <edge source="e66h689" target="you-get-an-upvote" />
    <edge source="e66h689" target="you-get-an-upvote" />
    <edge source="e66h689" target="e678xjb" />
    <edge source="e66h689" target="Neutral" />
    <edge source="e66z9i6" target="jourmungandr" />
    <edge source="e66z9i6" target="jourmungandr" />
    <edge source="e66z9i6" target="jourmungandr" />
    <edge source="e66z9i6" target="jourmungandr" />
    <edge source="e66z9i6" target="jourmungandr" />
    <edge source="e66z9i6" target="e67afj8" />
    <edge source="e66z9i6" target="Negative" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="BombadilEatsTheRing" />
    <edge source="e66f48l" target="Positive" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="BombadilEatsTheRing" />
    <edge source="e66dvea" target="e66gjoi" />
    <edge source="e66dvea" target="Positive" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="BombadilEatsTheRing" />
    <edge source="e678xjb" target="Positive" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="BombadilEatsTheRing" />
    <edge source="e67afj8" target="e67bm2a" />
    <edge source="e67afj8" target="Neutral" />
    <edge source="e66gjoi" target="gabe870" />
    <edge source="e66gjoi" target="gabe870" />
    <edge source="e66gjoi" target="gabe870" />
    <edge source="e66gjoi" target="Neutral" />
    <edge source="e67bm2a" target="jourmungandr" />
    <edge source="e67bm2a" target="jourmungandr" />
    <edge source="e67bm2a" target="jourmungandr" />
    <edge source="e67bm2a" target="jourmungandr" />
    <edge source="e67bm2a" target="jourmungandr" />
    <edge source="e67bm2a" target="e67cx1v" />
    <edge source="e67bm2a" target="Neutral" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="BombadilEatsTheRing" />
    <edge source="e67cx1v" target="Neutral" />
    <edge source="9gkn0j" target="e64vree" />
    <edge source="9gkn0j" target="e64ujfd" />
    <edge source="9gkn0j" target="e64y613" />
    <edge source="9gkn0j" target="e66pbbn" />
    <edge source="9gkn0j" target="e64xfo0" />
    <edge source="9gkn0j" target="e66vt29" />
    <edge source="9gkn0j" target="e66vmxd" />
    <edge source="e64vree" target="ReginaldIII" />
    <edge source="e64vree" target="e64xfo0" />
    <edge source="e64vree" target="e66vt29" />
    <edge source="e64vree" target="Neutral" />
    <edge source="e64ujfd" target="AndASM" />
    <edge source="e64ujfd" target="Neutral" />
    <edge source="e64y613" target="dabombnl" />
    <edge source="e64y613" target="Neutral" />
    <edge source="e66pbbn" target="ZaynThomas" />
    <edge source="e66pbbn" target="ZaynThomas" />
    <edge source="e66pbbn" target="e66vmxd" />
    <edge source="e66pbbn" target="Neutral" />
    <edge source="e64xfo0" target="celerym" />
    <edge source="e64xfo0" target="Neutral" />
    <edge source="e66vt29" target="asdqqqq" />
    <edge source="e66vt29" target="Positive" />
    <edge source="e66vmxd" target="ProgrammerBro" />
    <edge source="e66vmxd" target="Negative" />
    <edge source="9ggj4h" target="e641gxi" />
    <edge source="9ggj4h" target="e665pw5" />
    <edge source="e641gxi" target="dnabre" />
    <edge source="e641gxi" target="Positive" />
    <edge source="e665pw5" target="mostlikelynotarobot" />
    <edge source="e665pw5" target="Positive" />
    <edge source="97s8dl" target="e4auegy" />
    <edge source="97s8dl" target="e4apf0r" />
    <edge source="97s8dl" target="e4akr6z" />
    <edge source="97s8dl" target="e4bpisq" />
    <edge source="97s8dl" target="e4bul16" />
    <edge source="97s8dl" target="e4akyzn" />
    <edge source="97s8dl" target="e4al1uq" />
    <edge source="97s8dl" target="e4bmx7u" />
    <edge source="97s8dl" target="e4cbzu0" />
    <edge source="97s8dl" target="e4celt3" />
    <edge source="97s8dl" target="e4chpbg" />
    <edge source="97s8dl" target="e4digjl" />
    <edge source="97s8dl" target="e4c5w4j" />
    <edge source="97s8dl" target="e4i9yyk" />
    <edge source="97s8dl" target="e66j7eq" />
    <edge source="97s8dl" target="e4akxsl" />
    <edge source="97s8dl" target="e4aznhr" />
    <edge source="97s8dl" target="e4apf4w" />
    <edge source="97s8dl" target="e4apf88" />
    <edge source="97s8dl" target="e4amw9i" />
    <edge source="97s8dl" target="e4eahki" />
    <edge source="97s8dl" target="e4alo5d" />
    <edge source="97s8dl" target="e4alv3q" />
    <edge source="97s8dl" target="e4ccl57" />
    <edge source="97s8dl" target="e4cfh25" />
    <edge source="97s8dl" target="e4digt8" />
    <edge source="97s8dl" target="e4e903v" />
    <edge source="97s8dl" target="e4i9z3i" />
    <edge source="97s8dl" target="e4ia93g" />
    <edge source="97s8dl" target="e4iaahk" />
    <edge source="97s8dl" target="e4iabit" />
    <edge source="97s8dl" target="e4iaeaa" />
    <edge source="97s8dl" target="e4iaqod" />
    <edge source="97s8dl" target="e4m73e4" />
    <edge source="97s8dl" target="e4b5cpc" />
    <edge source="97s8dl" target="e4am7vz" />
    <edge source="97s8dl" target="e4asmt5" />
    <edge source="97s8dl" target="e4amfzv" />
    <edge source="97s8dl" target="e4ccl9v" />
    <edge source="97s8dl" target="e4cdzfr" />
    <edge source="97s8dl" target="e4cj3d5" />
    <edge source="97s8dl" target="e4fap4m" />
    <edge source="97s8dl" target="e4ia06e" />
    <edge source="97s8dl" target="e4iaarn" />
    <edge source="97s8dl" target="e4iaefr" />
    <edge source="97s8dl" target="e4iarpt" />
    <edge source="97s8dl" target="e4c2lom" />
    <edge source="97s8dl" target="e4c4ghi" />
    <edge source="97s8dl" target="e4ca5zp" />
    <edge source="97s8dl" target="e4aw6ql" />
    <edge source="97s8dl" target="e4ceuyo" />
    <edge source="97s8dl" target="e4ghpsu" />
    <edge source="97s8dl" target="e4iase3" />
    <edge source="97s8dl" target="e4fb4fx" />
    <edge source="97s8dl" target="e4fc3ou" />
    <edge source="97s8dl" target="e4b5zpd" />
    <edge source="97s8dl" target="e4iaspq" />
    <edge source="97s8dl" target="e4gjz6s" />
    <edge source="97s8dl" target="e4hokg0" />
    <edge source="97s8dl" target="e4itpf7" />
    <edge source="97s8dl" target="e4j23r1" />
    <edge source="97s8dl" target="e4jtusi" />
    <edge source="e4auegy" target="sagaciux" />
    <edge source="e4auegy" target="sagaciux" />
    <edge source="e4auegy" target="sagaciux" />
    <edge source="e4auegy" target="sagaciux" />
    <edge source="e4auegy" target="sagaciux" />
    <edge source="e4auegy" target="sagaciux" />
    <edge source="e4auegy" target="sagaciux" />
    <edge source="e4auegy" target="e4aznhr" />
    <edge source="e4auegy" target="Positive" />
    <edge source="e4apf0r" target="WeirdEidolon" />
    <edge source="e4apf0r" target="e4apf4w" />
    <edge source="e4apf0r" target="e4apf88" />
    <edge source="e4apf0r" target="Positive" />
    <edge source="e4akr6z" target="Rococoon" />
    <edge source="e4akr6z" target="e4amw9i" />
    <edge source="e4akr6z" target="e4eahki" />
    <edge source="e4akr6z" target="Positive" />
    <edge source="e4bpisq" target="pdxdabel" />
    <edge source="e4bpisq" target="Neutral" />
    <edge source="e4bul16" target="UnderTruth" />
    <edge source="e4bul16" target="Positive" />
    <edge source="e4akyzn" target="noam_compsci" />
    <edge source="e4akyzn" target="noam_compsci" />
    <edge source="e4akyzn" target="e4alo5d" />
    <edge source="e4akyzn" target="Neutral" />
    <edge source="e4al1uq" target="Anonymous" />
    <edge source="e4al1uq" target="Anonymous" />
    <edge source="e4al1uq" target="Anonymous" />
    <edge source="e4al1uq" target="Anonymous" />
    <edge source="e4al1uq" target="Anonymous" />
    <edge source="e4al1uq" target="e4alv3q" />
    <edge source="e4al1uq" target="Neutral" />
    <edge source="e4bmx7u" target="GayMakeAndModel" />
    <edge source="e4bmx7u" target="Neutral" />
    <edge source="e4cbzu0" target="Anonymous" />
    <edge source="e4cbzu0" target="Anonymous" />
    <edge source="e4cbzu0" target="Anonymous" />
    <edge source="e4cbzu0" target="Anonymous" />
    <edge source="e4cbzu0" target="Anonymous" />
    <edge source="e4cbzu0" target="e4ccl57" />
    <edge source="e4cbzu0" target="Neutral" />
    <edge source="e4celt3" target="Meguli" />
    <edge source="e4celt3" target="Meguli" />
    <edge source="e4celt3" target="e4cfh25" />
    <edge source="e4celt3" target="Positive" />
    <edge source="e4chpbg" target="quiteamess" />
    <edge source="e4chpbg" target="Neutral" />
    <edge source="e4digjl" target="zergling_Lester" />
    <edge source="e4digjl" target="e4digt8" />
    <edge source="e4digjl" target="e4e903v" />
    <edge source="e4digjl" target="Positive" />
    <edge source="e4c5w4j" target="criticalcontext" />
    <edge source="e4c5w4j" target="Positive" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="kiwi0fruit" />
    <edge source="e4i9yyk" target="e4i9z3i" />
    <edge source="e4i9yyk" target="e4ia93g" />
    <edge source="e4i9yyk" target="e4iaahk" />
    <edge source="e4i9yyk" target="e4iabit" />
    <edge source="e4i9yyk" target="e4iaeaa" />
    <edge source="e4i9yyk" target="e4iaqod" />
    <edge source="e4i9yyk" target="e4m73e4" />
    <edge source="e4i9yyk" target="Neutral" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="kiwi0fruit" />
    <edge source="e66j7eq" target="Positive" />
    <edge source="e4akxsl" target="SnowceanJay" />
    <edge source="e4akxsl" target="Neutral" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="kiwi0fruit" />
    <edge source="e4aznhr" target="e4b5cpc" />
    <edge source="e4aznhr" target="Positive" />
    <edge source="e4apf4w" target="HelperBot_" />
    <edge source="e4apf4w" target="Positive" />
    <edge source="e4apf88" target="WikiTextBot" />
    <edge source="e4apf88" target="WikiTextBot" />
    <edge source="e4apf88" target="WikiTextBot" />
    <edge source="e4apf88" target="WikiTextBot" />
    <edge source="e4apf88" target="Neutral" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="kiwi0fruit" />
    <edge source="e4amw9i" target="Positive" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="kiwi0fruit" />
    <edge source="e4eahki" target="Positive" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="kiwi0fruit" />
    <edge source="e4alo5d" target="e4am7vz" />
    <edge source="e4alo5d" target="Neutral" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="kiwi0fruit" />
    <edge source="e4alv3q" target="e4asmt5" />
    <edge source="e4alv3q" target="e4amfzv" />
    <edge source="e4alv3q" target="Positive" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="kiwi0fruit" />
    <edge source="e4ccl57" target="e4ccl9v" />
    <edge source="e4ccl57" target="e4cdzfr" />
    <edge source="e4ccl57" target="Positive" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="kiwi0fruit" />
    <edge source="e4cfh25" target="e4cj3d5" />
    <edge source="e4cfh25" target="Positive" />
    <edge source="e4digt8" target="WikiTextBot" />
    <edge source="e4digt8" target="WikiTextBot" />
    <edge source="e4digt8" target="WikiTextBot" />
    <edge source="e4digt8" target="WikiTextBot" />
    <edge source="e4digt8" target="Neutral" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="kiwi0fruit" />
    <edge source="e4e903v" target="e4fap4m" />
    <edge source="e4e903v" target="Positive" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="kiwi0fruit" />
    <edge source="e4i9z3i" target="e4ia06e" />
    <edge source="e4i9z3i" target="Positive" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="kiwi0fruit" />
    <edge source="e4ia93g" target="Neutral" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="kiwi0fruit" />
    <edge source="e4iaahk" target="e4iaarn" />
    <edge source="e4iaahk" target="Positive" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="kiwi0fruit" />
    <edge source="e4iabit" target="Positive" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="kiwi0fruit" />
    <edge source="e4iaeaa" target="e4iaefr" />
    <edge source="e4iaeaa" target="Negative" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="kiwi0fruit" />
    <edge source="e4iaqod" target="e4iarpt" />
    <edge source="e4iaqod" target="Neutral" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="kiwi0fruit" />
    <edge source="e4m73e4" target="Positive" />
    <edge source="e4b5cpc" target="sagaciux" />
    <edge source="e4b5cpc" target="sagaciux" />
    <edge source="e4b5cpc" target="sagaciux" />
    <edge source="e4b5cpc" target="sagaciux" />
    <edge source="e4b5cpc" target="sagaciux" />
    <edge source="e4b5cpc" target="sagaciux" />
    <edge source="e4b5cpc" target="sagaciux" />
    <edge source="e4b5cpc" target="e4c2lom" />
    <edge source="e4b5cpc" target="e4c4ghi" />
    <edge source="e4b5cpc" target="e4ca5zp" />
    <edge source="e4b5cpc" target="Positive" />
    <edge source="e4am7vz" target="noam_compsci" />
    <edge source="e4am7vz" target="noam_compsci" />
    <edge source="e4am7vz" target="Positive" />
    <edge source="e4asmt5" target="daermonn" />
    <edge source="e4asmt5" target="daermonn" />
    <edge source="e4asmt5" target="e4aw6ql" />
    <edge source="e4asmt5" target="Positive" />
    <edge source="e4amfzv" target="Anonymous" />
    <edge source="e4amfzv" target="Anonymous" />
    <edge source="e4amfzv" target="Anonymous" />
    <edge source="e4amfzv" target="Anonymous" />
    <edge source="e4amfzv" target="Anonymous" />
    <edge source="e4amfzv" target="Neutral" />
    <edge source="e4ccl9v" target="WikiTextBot" />
    <edge source="e4ccl9v" target="WikiTextBot" />
    <edge source="e4ccl9v" target="WikiTextBot" />
    <edge source="e4ccl9v" target="WikiTextBot" />
    <edge source="e4ccl9v" target="Negative" />
    <edge source="e4cdzfr" target="Anonymous" />
    <edge source="e4cdzfr" target="Anonymous" />
    <edge source="e4cdzfr" target="Anonymous" />
    <edge source="e4cdzfr" target="Anonymous" />
    <edge source="e4cdzfr" target="Anonymous" />
    <edge source="e4cdzfr" target="e4ceuyo" />
    <edge source="e4cdzfr" target="Neutral" />
    <edge source="e4cj3d5" target="Meguli" />
    <edge source="e4cj3d5" target="Meguli" />
    <edge source="e4cj3d5" target="Neutral" />
    <edge source="e4fap4m" target="sagaciux" />
    <edge source="e4fap4m" target="sagaciux" />
    <edge source="e4fap4m" target="sagaciux" />
    <edge source="e4fap4m" target="sagaciux" />
    <edge source="e4fap4m" target="sagaciux" />
    <edge source="e4fap4m" target="sagaciux" />
    <edge source="e4fap4m" target="sagaciux" />
    <edge source="e4fap4m" target="e4ghpsu" />
    <edge source="e4fap4m" target="Positive" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="kiwi0fruit" />
    <edge source="e4ia06e" target="Positive" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="kiwi0fruit" />
    <edge source="e4iaarn" target="Positive" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="kiwi0fruit" />
    <edge source="e4iaefr" target="Positive" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="kiwi0fruit" />
    <edge source="e4iarpt" target="e4iase3" />
    <edge source="e4iarpt" target="Positive" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="kiwi0fruit" />
    <edge source="e4c2lom" target="e4fb4fx" />
    <edge source="e4c2lom" target="Positive" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="kiwi0fruit" />
    <edge source="e4c4ghi" target="Positive" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="kiwi0fruit" />
    <edge source="e4ca5zp" target="e4fc3ou" />
    <edge source="e4ca5zp" target="Positive" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="kiwi0fruit" />
    <edge source="e4aw6ql" target="e4b5zpd" />
    <edge source="e4aw6ql" target="Positive" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="kiwi0fruit" />
    <edge source="e4ceuyo" target="Positive" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="kiwi0fruit" />
    <edge source="e4ghpsu" target="Positive" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="kiwi0fruit" />
    <edge source="e4iase3" target="e4iaspq" />
    <edge source="e4iase3" target="Positive" />
    <edge source="e4fb4fx" target="sagaciux" />
    <edge source="e4fb4fx" target="sagaciux" />
    <edge source="e4fb4fx" target="sagaciux" />
    <edge source="e4fb4fx" target="sagaciux" />
    <edge source="e4fb4fx" target="sagaciux" />
    <edge source="e4fb4fx" target="sagaciux" />
    <edge source="e4fb4fx" target="sagaciux" />
    <edge source="e4fb4fx" target="Negative" />
    <edge source="e4fc3ou" target="sagaciux" />
    <edge source="e4fc3ou" target="sagaciux" />
    <edge source="e4fc3ou" target="sagaciux" />
    <edge source="e4fc3ou" target="sagaciux" />
    <edge source="e4fc3ou" target="sagaciux" />
    <edge source="e4fc3ou" target="sagaciux" />
    <edge source="e4fc3ou" target="sagaciux" />
    <edge source="e4fc3ou" target="e4gjz6s" />
    <edge source="e4fc3ou" target="Negative" />
    <edge source="e4b5zpd" target="daermonn" />
    <edge source="e4b5zpd" target="daermonn" />
    <edge source="e4b5zpd" target="Positive" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="kiwi0fruit" />
    <edge source="e4iaspq" target="Neutral" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="kiwi0fruit" />
    <edge source="e4gjz6s" target="e4hokg0" />
    <edge source="e4gjz6s" target="Negative" />
    <edge source="e4hokg0" target="sagaciux" />
    <edge source="e4hokg0" target="sagaciux" />
    <edge source="e4hokg0" target="sagaciux" />
    <edge source="e4hokg0" target="sagaciux" />
    <edge source="e4hokg0" target="sagaciux" />
    <edge source="e4hokg0" target="sagaciux" />
    <edge source="e4hokg0" target="sagaciux" />
    <edge source="e4hokg0" target="e4itpf7" />
    <edge source="e4hokg0" target="Positive" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="kiwi0fruit" />
    <edge source="e4itpf7" target="e4j23r1" />
    <edge source="e4itpf7" target="Positive" />
    <edge source="e4j23r1" target="sagaciux" />
    <edge source="e4j23r1" target="sagaciux" />
    <edge source="e4j23r1" target="sagaciux" />
    <edge source="e4j23r1" target="sagaciux" />
    <edge source="e4j23r1" target="sagaciux" />
    <edge source="e4j23r1" target="sagaciux" />
    <edge source="e4j23r1" target="sagaciux" />
    <edge source="e4j23r1" target="e4jtusi" />
    <edge source="e4j23r1" target="Negative" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="kiwi0fruit" />
    <edge source="e4jtusi" target="Positive" />
    <edge source="9gulx5" target="e66wtyi" />
    <edge source="9gulx5" target="e67b2uf" />
    <edge source="9gulx5" target="e67c4do" />
    <edge source="9gulx5" target="e66ybxa" />
    <edge source="9gulx5" target="e66wtuv" />
    <edge source="9gulx5" target="e66wf3r" />
    <edge source="9gulx5" target="e673ixg" />
    <edge source="9gulx5" target="e67cftw" />
    <edge source="9gulx5" target="e66y7gl" />
    <edge source="9gulx5" target="e673o6m" />
    <edge source="9gulx5" target="e66yq6c" />
    <edge source="9gulx5" target="e66zb12" />
    <edge source="9gulx5" target="e66zoed" />
    <edge source="9gulx5" target="e66zzki" />
    <edge source="9gulx5" target="e6727yp" />
    <edge source="e66wtyi" target="jx4713" />
    <edge source="e66wtyi" target="jx4713" />
    <edge source="e66wtyi" target="jx4713" />
    <edge source="e66wtyi" target="e673ixg" />
    <edge source="e66wtyi" target="Positive" />
    <edge source="e67b2uf" target="spicy45" />
    <edge source="e67b2uf" target="Neutral" />
    <edge source="e67c4do" target="Crysis456" />
    <edge source="e67c4do" target="Crysis456" />
    <edge source="e67c4do" target="Neutral" />
    <edge source="e66ybxa" target="Mmsn1234" />
    <edge source="e66ybxa" target="Neutral" />
    <edge source="e66wtuv" target="UnconstitutionalSir" />
    <edge source="e66wtuv" target="UnconstitutionalSir" />
    <edge source="e66wtuv" target="UnconstitutionalSir" />
    <edge source="e66wtuv" target="UnconstitutionalSir" />
    <edge source="e66wtuv" target="e67cftw" />
    <edge source="e66wtuv" target="Positive" />
    <edge source="e66wf3r" target="UnconstitutionalSir" />
    <edge source="e66wf3r" target="UnconstitutionalSir" />
    <edge source="e66wf3r" target="UnconstitutionalSir" />
    <edge source="e66wf3r" target="UnconstitutionalSir" />
    <edge source="e66wf3r" target="e66y7gl" />
    <edge source="e66wf3r" target="Positive" />
    <edge source="e673ixg" target="TomvdZ" />
    <edge source="e673ixg" target="e673o6m" />
    <edge source="e673ixg" target="Neutral" />
    <edge source="e67cftw" target="Crysis456" />
    <edge source="e67cftw" target="Crysis456" />
    <edge source="e67cftw" target="Neutral" />
    <edge source="e66y7gl" target="PM_ME_IRL" />
    <edge source="e66y7gl" target="PM_ME_IRL" />
    <edge source="e66y7gl" target="PM_ME_IRL" />
    <edge source="e66y7gl" target="PM_ME_IRL" />
    <edge source="e66y7gl" target="e66yq6c" />
    <edge source="e66y7gl" target="Neutral" />
    <edge source="e673o6m" target="jx4713" />
    <edge source="e673o6m" target="jx4713" />
    <edge source="e673o6m" target="jx4713" />
    <edge source="e673o6m" target="Neutral" />
    <edge source="e66yq6c" target="UnconstitutionalSir" />
    <edge source="e66yq6c" target="UnconstitutionalSir" />
    <edge source="e66yq6c" target="UnconstitutionalSir" />
    <edge source="e66yq6c" target="UnconstitutionalSir" />
    <edge source="e66yq6c" target="e66zb12" />
    <edge source="e66yq6c" target="Neutral" />
    <edge source="e66zb12" target="PM_ME_IRL" />
    <edge source="e66zb12" target="PM_ME_IRL" />
    <edge source="e66zb12" target="PM_ME_IRL" />
    <edge source="e66zb12" target="PM_ME_IRL" />
    <edge source="e66zb12" target="e66zoed" />
    <edge source="e66zb12" target="Positive" />
    <edge source="e66zoed" target="UnconstitutionalSir" />
    <edge source="e66zoed" target="UnconstitutionalSir" />
    <edge source="e66zoed" target="UnconstitutionalSir" />
    <edge source="e66zoed" target="UnconstitutionalSir" />
    <edge source="e66zoed" target="e66zzki" />
    <edge source="e66zoed" target="e6727yp" />
    <edge source="e66zoed" target="Positive" />
    <edge source="e66zzki" target="PM_ME_IRL" />
    <edge source="e66zzki" target="PM_ME_IRL" />
    <edge source="e66zzki" target="PM_ME_IRL" />
    <edge source="e66zzki" target="PM_ME_IRL" />
    <edge source="e66zzki" target="Positive" />
    <edge source="e6727yp" target="jx4713" />
    <edge source="e6727yp" target="jx4713" />
    <edge source="e6727yp" target="jx4713" />
    <edge source="e6727yp" target="Positive" />
    <edge source="9gvpj5" target="e674yvs" />
    <edge source="9gvpj5" target="e6756bv" />
    <edge source="9gvpj5" target="e675gaz" />
    <edge source="e674yvs" target="mitchpllease" />
    <edge source="e674yvs" target="mitchpllease" />
    <edge source="e674yvs" target="e6756bv" />
    <edge source="e674yvs" target="Positive" />
    <edge source="e6756bv" target="SiliusSodus" />
    <edge source="e6756bv" target="e675gaz" />
    <edge source="e6756bv" target="Positive" />
    <edge source="e675gaz" target="mitchpllease" />
    <edge source="e675gaz" target="mitchpllease" />
    <edge source="e675gaz" target="Positive" />
    <edge source="9grnk7" target="e66dmq5" />
    <edge source="e66dmq5" target="AutoModerator" />
    <edge source="e66dmq5" target="Positive" />
    <edge source="9cw4yq" target="e5dlqqm" />
    <edge source="9cw4yq" target="e5e6y1b" />
    <edge source="9cw4yq" target="e5eja0p" />
    <edge source="9cw4yq" target="e5dlmwn" />
    <edge source="9cw4yq" target="e5ey760" />
    <edge source="9cw4yq" target="e5f9rev" />
    <edge source="9cw4yq" target="e5fho3h" />
    <edge source="9cw4yq" target="e5ecub2" />
    <edge source="9cw4yq" target="e661m0g" />
    <edge source="9cw4yq" target="e5dykns" />
    <edge source="9cw4yq" target="e5dscsz" />
    <edge source="9cw4yq" target="e5dlr1g" />
    <edge source="9cw4yq" target="e5ewyt3" />
    <edge source="9cw4yq" target="e5dp868" />
    <edge source="9cw4yq" target="e5dn92v" />
    <edge source="9cw4yq" target="e5dsum0" />
    <edge source="9cw4yq" target="e5eyiq4" />
    <edge source="9cw4yq" target="e5fjj9i" />
    <edge source="9cw4yq" target="e5fiblm" />
    <edge source="9cw4yq" target="e5fnbgf" />
    <edge source="9cw4yq" target="e5es4kx" />
    <edge source="9cw4yq" target="e5dpnrp" />
    <edge source="9cw4yq" target="e5fqwgm" />
    <edge source="9cw4yq" target="e5hl8xl" />
    <edge source="9cw4yq" target="e5fones" />
    <edge source="9cw4yq" target="e5esqo6" />
    <edge source="9cw4yq" target="e5gwlrt" />
    <edge source="9cw4yq" target="e5fp19m" />
    <edge source="9cw4yq" target="e5olnkn" />
    <edge source="9cw4yq" target="e5hiz68" />
    <edge source="9cw4yq" target="e5fpnty" />
    <edge source="e5dlqqm" target="okayIfUSaySo" />
    <edge source="e5dlqqm" target="okayIfUSaySo" />
    <edge source="e5dlqqm" target="okayIfUSaySo" />
    <edge source="e5dlqqm" target="okayIfUSaySo" />
    <edge source="e5dlqqm" target="e5dscsz" />
    <edge source="e5dlqqm" target="e5dlr1g" />
    <edge source="e5dlqqm" target="Positive" />
    <edge source="e5e6y1b" target="Scentable" />
    <edge source="e5e6y1b" target="e5ewyt3" />
    <edge source="e5e6y1b" target="Neutral" />
    <edge source="e5eja0p" target="rozling" />
    <edge source="e5eja0p" target="Neutral" />
    <edge source="e5dlmwn" target="dragonnyxx" />
    <edge source="e5dlmwn" target="e5dp868" />
    <edge source="e5dlmwn" target="e5dn92v" />
    <edge source="e5dlmwn" target="e5dsum0" />
    <edge source="e5dlmwn" target="Positive" />
    <edge source="e5ey760" target="bhez" />
    <edge source="e5ey760" target="e5eyiq4" />
    <edge source="e5ey760" target="Positive" />
    <edge source="e5f9rev" target="dances_with_poodles" />
    <edge source="e5f9rev" target="Negative" />
    <edge source="e5fho3h" target="Praxon1" />
    <edge source="e5fho3h" target="e5fjj9i" />
    <edge source="e5fho3h" target="e5fiblm" />
    <edge source="e5fho3h" target="Positive" />
    <edge source="e5ecub2" target="nah248" />
    <edge source="e5ecub2" target="Neutral" />
    <edge source="e661m0g" target="sweetsmellingrosie" />
    <edge source="e661m0g" target="Positive" />
    <edge source="e5dykns" target="lissofossil" />
    <edge source="e5dykns" target="Neutral" />
    <edge source="e5dscsz" target="pythor" />
    <edge source="e5dscsz" target="pythor" />
    <edge source="e5dscsz" target="pythor" />
    <edge source="e5dscsz" target="pythor" />
    <edge source="e5dscsz" target="e5fnbgf" />
    <edge source="e5dscsz" target="Negative" />
    <edge source="e5dlr1g" target="WikiTextBot" />
    <edge source="e5dlr1g" target="WikiTextBot" />
    <edge source="e5dlr1g" target="WikiTextBot" />
    <edge source="e5dlr1g" target="WikiTextBot" />
    <edge source="e5dlr1g" target="Negative" />
    <edge source="e5ewyt3" target="lakesObacon" />
    <edge source="e5ewyt3" target="Neutral" />
    <edge source="e5dp868" target="bonafidebob" />
    <edge source="e5dp868" target="e5es4kx" />
    <edge source="e5dp868" target="Neutral" />
    <edge source="e5dn92v" target="Anonymous" />
    <edge source="e5dn92v" target="Anonymous" />
    <edge source="e5dn92v" target="Anonymous" />
    <edge source="e5dn92v" target="Anonymous" />
    <edge source="e5dn92v" target="Anonymous" />
    <edge source="e5dn92v" target="e5dpnrp" />
    <edge source="e5dn92v" target="Neutral" />
    <edge source="e5dsum0" target="pythor" />
    <edge source="e5dsum0" target="pythor" />
    <edge source="e5dsum0" target="pythor" />
    <edge source="e5dsum0" target="pythor" />
    <edge source="e5dsum0" target="Positive" />
    <edge source="e5eyiq4" target="okayIfUSaySo" />
    <edge source="e5eyiq4" target="okayIfUSaySo" />
    <edge source="e5eyiq4" target="okayIfUSaySo" />
    <edge source="e5eyiq4" target="okayIfUSaySo" />
    <edge source="e5eyiq4" target="e5fqwgm" />
    <edge source="e5eyiq4" target="Neutral" />
    <edge source="e5fjj9i" target="okayIfUSaySo" />
    <edge source="e5fjj9i" target="okayIfUSaySo" />
    <edge source="e5fjj9i" target="okayIfUSaySo" />
    <edge source="e5fjj9i" target="okayIfUSaySo" />
    <edge source="e5fjj9i" target="Negative" />
    <edge source="e5fiblm" target="MathPolice" />
    <edge source="e5fiblm" target="e5hl8xl" />
    <edge source="e5fiblm" target="Neutral" />
    <edge source="e5fnbgf" target="munificent" />
    <edge source="e5fnbgf" target="munificent" />
    <edge source="e5fnbgf" target="e5fones" />
    <edge source="e5fnbgf" target="Positive" />
    <edge source="e5es4kx" target="PM_ME_IRL" />
    <edge source="e5es4kx" target="PM_ME_IRL" />
    <edge source="e5es4kx" target="PM_ME_IRL" />
    <edge source="e5es4kx" target="PM_ME_IRL" />
    <edge source="e5es4kx" target="e5esqo6" />
    <edge source="e5es4kx" target="Neutral" />
    <edge source="e5dpnrp" target="geon" />
    <edge source="e5dpnrp" target="Neutral" />
    <edge source="e5fqwgm" target="ggPeti" />
    <edge source="e5fqwgm" target="ggPeti" />
    <edge source="e5fqwgm" target="e5gwlrt" />
    <edge source="e5fqwgm" target="Positive" />
    <edge source="e5hl8xl" target="TezlaKoil" />
    <edge source="e5hl8xl" target="Neutral" />
    <edge source="e5fones" target="pythor" />
    <edge source="e5fones" target="pythor" />
    <edge source="e5fones" target="pythor" />
    <edge source="e5fones" target="pythor" />
    <edge source="e5fones" target="e5fp19m" />
    <edge source="e5fones" target="Neutral" />
    <edge source="e5esqo6" target="OMGIMSOLOST" />
    <edge source="e5esqo6" target="e5olnkn" />
    <edge source="e5esqo6" target="Neutral" />
    <edge source="e5gwlrt" target="okayIfUSaySo" />
    <edge source="e5gwlrt" target="okayIfUSaySo" />
    <edge source="e5gwlrt" target="okayIfUSaySo" />
    <edge source="e5gwlrt" target="okayIfUSaySo" />
    <edge source="e5gwlrt" target="e5hiz68" />
    <edge source="e5gwlrt" target="Negative" />
    <edge source="e5fp19m" target="munificent" />
    <edge source="e5fp19m" target="munificent" />
    <edge source="e5fp19m" target="e5fpnty" />
    <edge source="e5fp19m" target="Negative" />
    <edge source="e5olnkn" target="trichotillofobia" />
    <edge source="e5olnkn" target="Neutral" />
    <edge source="e5hiz68" target="ggPeti" />
    <edge source="e5hiz68" target="ggPeti" />
    <edge source="e5hiz68" target="Negative" />
    <edge source="e5fpnty" target="pythor" />
    <edge source="e5fpnty" target="pythor" />
    <edge source="e5fpnty" target="pythor" />
    <edge source="e5fpnty" target="pythor" />
    <edge source="e5fpnty" target="Positive" />
  </graph>
</graphml>
